<plain_text><page sequence="1">Instructional Science 10 (1981) 379-392 Elsevier Scientific Publishing Company, Amsterdam — Printed in the Netherlands BOOK REVIEWS Seymour Papert, Mindstonns: Children, Computers, and Powerful Ideas. Harvester Studies in Cognitive Science. Brighton: Harvester Press, viii + 230 pp., £9.95. The author, a self-confessed Utopian educationalist, believes that if only children could be encouraged to learn programming, this might radically change the way they set about solving problems, learning new skills and possibly even alter the way they think in general. One way of achieving this is by getting them to program the movements of a toy turtle. Starting with a mechanical turtle which can be commanded from a computer key board to travel over the floor leaving a trace of its path, children are then shown that the same commands will control the movements of a television screen turtle. These commands are expressed in "turtle talk," a powerful programming language, specially constructed for educational use by an M.I.T. research group, which has full list structure and allows procedural definitions with local variables, so that new commands can "be defined and used like basic ones. These basic turtle commands are extremely simple: move forwards (or backwards) a number of steps and turn right (or left) a number of angular units. Children find it fairly easy to program the succession of commands which make the turtle trace out a square or a triangle and to label and store the programs for future use. To construct these programs the child is encouraged to observe and reflect on his own thinking and actions, an activity rarely encouraged in current school practice and which the author believes is essential for cognitive development. To make the turtle trace out a circle, for example, is easy for the child once he notices that when he himself walks in a circle he takes a small step forward, turns a little, and keeps on repeating this se quence. Besides discovering that iteration and recursion are powerful problem-solving proce dures, modular thinking is introduced when the child tries to get the turtle to trace the outline of a house: at some point he will realise that it can easily be done by linking to gether previously programmed and defined procedures for tracing out squares and trian gles. In addition to these insights into general problem-solving techniques which struc tural programming might elicit, there is an important activity with which all programmers are only too well acquainted. Nearly all of us, when we discover that our initial attempt to solve a problem is unsuccessful want to scrap and forget all we've done and start again from scratch. But debugging, for the programmer, means precisely not starting afresh, but finding out where the program was faulty and only altering it at those points: a precept which the author thinks has far wider applicability than merely in the context of com puter programming, and which should be in every child's problem-solving kit.</page><page sequence="2">380 But suppose that children, as a result of learning how to make their turtles trace out patterns of lines, or even exploring Newtonian and non-Newtonian dynamics with 'Dyna' turtles, eventually become sophisticated structural programmers and debuggers — as many have in the experimental classes run during the past decade by M.I.T. research teachers. Would these skills generalise very far beyond the immediate context of com puter programming? And it's not only heuristic principles that are important but also "mathetics," the author's word for principles which may help one learn more efficiently and rapidly. As evidence for the generality of these principles there's a fascinating analysis of juggling. "Cascade" juggling, where there is only one type of toss involved, when suitably modularised into basic actions and expressed recursively, leads to an efficient way of learning the skill — and even the notion of debugging is usefully applied to one of the component actions. But this example (and a few moving case histories of children overcoming cognitive blocks, apparently as a result of the insights into their own thinking which occurred while programming) is hardly convincing. Turtle programming may one day play the same gen eral role in education that Latin and Greek were supposed to play in the past, but many other factors have to be taken into account before it is shown to elicit ways of thinking going very far beyond the immediate context in which it is practised. Perhaps most important is the influence of enthusiastic, dedicated teachers, keen to introduce revolutionary educational ideas and, one hopes, finally chosen for their emo tional sensitivity and ability to interact with children. It is going to be difficult to find the supposed "control" classes to assess the extent to which children flourish cognitively as a direct result of programming and playing with computers rather than because they are surrounded by dedicated, gifted, teachers — and a further difficulty will be deciding what criteria should be used to assess the success of this project, since the author persuasively challenges what should be included in the mathematical culture of a teenager. Without much more research — and much has already been done at M.I.T. and elsewhere — investment in the computers, software and teacher training required to im plement these original and exciting ideas would obviously be premature. Even now the computers required are more powerful and expensive than the general run of micropro cessors within the reach of most school budgets — though at the present rate of techno logical development it will not be long before this is no longer true. At present, economy and premature mass production by manufacturers has led to the propagation of crude computer languages. As a result, many school children and amateurs start, and possibly finish, their acquaintance with computing using only BASIC. As the author argues con vincingly, it is "as unacceptable for children to enter the computer culture by learning computer languages such as BASIC as it would be to confine their access to English poetry to pidgin English translations". What has happened in the computer world is an example of what the author calls the QWERTY phenomenon — "a tendency for the first usable, but still primitive, pro duct of a new technology to dig itself in". The word comes from the top row of type writer keys originally arranged to prevent keys struck in immediate succession from jamming. But although typewriter technology solved the jamming problem a few years later, the key sequence has been retained to this day, despite its evident inefficiency - and the widespread use of BASIC is possibly an analogous phenomenon.</page><page sequence="3">381 Throughout the book there are references to Piaget and genetic epistemology, which is hardly surprising since the author spent many years in Geneva working in close collaboration with him. One point of difference between them is that Piaget tended to attribute the course of cognitive development to the increasing complexity of the con cepts acquired. For the author it is not so much the complexity of a concept that delays its acquisition but rather the cultural context which for one reason or another, has not presented the child with the environment which would have elicited its development. Not surprisingly, programming turtle geometry is proposed as a possible environment for helping in the development of deep cognitive concepts well before they would other wise appear. Perhaps of greater interest, is the attempt to account for the development of the concept of liquid conservation in terms of an internal dialogue between three agents. One agent judges the quantity of liquid by its level, a second by the width of the container it is in and a third judges that the quantity of liquid is the same as that in the reference glass because it was the same previously. The conflict between the judgements of these three agents is finally resolved by the appearance of a fourth agent, who regulates the interac tion between the first two agents. Though at the moment this sketch of the theory appears to be superficially rather anthropomorphic, and in many respects similar to Piaget's theory in terms of the notion of equilibrium, the full account of the explanation, expressed in appropriate programming language, is to appear in a book in this series written jointly by Papert and Marvin Minsky. Even if one is not entirely convinced that turtle programming will have the far reaching cognitive effects the author claims, the book is required reading for all educa tionalists concerned with the impact computers will have on teaching. It is written with passion and wit, and incidentally, gives compelling reasons for questioning the present use of computers in schools. A. R. Jonckheere Psychology Department, University College, London</page></plain_text>