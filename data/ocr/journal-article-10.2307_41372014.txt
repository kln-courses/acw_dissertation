<plain_text><page sequence="1">A LAYMAN'S GUIDE TO COMPUTERS A paper by PROFESSOR R. A. BUCKINGHAM , Ph.D. Directory Institute of Computer Science , University of London , read to the Society on Wednesday 2*jth November 1968, with Dr. Jeremy Bray , M.P. , Joint Parliamentary Secretary , Ministry of Technology , in the Chair the chairman : Everyone in the computer world is rather like what the policeman sang in Iolanthey that 'every child born into this world is either a little Liberal or else a little Conservative'. In the computer world it is 'either a little Manchester or a little Cambridge'. Professor Buckingham is something of an exception here, because he was neither out of the Manchester computing stable nor out of the Cambridge computing stable (although, of course, he was a Cambridge undergraduate in his early days). He is a bona fide Londoner so far as computing goes. As a quantum physicist he was concerned with what were in those days mammoth computations, and he came into computing, as many of the pioneers did, through numerical analysis. He published an important book in this field in 1957. The computer world was very voracious in its demands for professional talent and it wasn't long before Professor Buckingham found himself head of the unit which first operated the Mercury in London. From this unit sprang the organization which now operates the second generation Atlas machine, and is very shortly moving on to the C.D.C. 6600, a very large machine which will have extensive entrails spreading out over much of London University. So we have in Professor Buckingham a very long-established and a very experi- enced guide to the computer world. His connection with the Royal Society of Arts is also close, as he is Chairman of the U.K. Co-ordinating Committee for Examinations in Computer Studies, which was set up by the Society together with the City and Guilds of London Institute, the Scottish Council for Commercial, Administrative and Professional Education and the National Computing Centre. The Society's Computer Operator's Certificate is among the qualifications recognized by the Co-ordinating Committee for the award of the joint certificate. As the computer field is moving rapidly, so the requirements of the personnel are moving rapidly too. The following paper y which was illustrated , was then read. THE PAPER Thank you, Mr. Chairman, for your very kind introduction. I am also very conscious of the honour which the Royal Society of Arts has done me by inviting me to give this lecture, and it is a great pleasure to do so in this fine hall. Let me say first how I propose to tackle this subject. I should like to give you some idea of the three main components of a working computer system. The first two are conveniently described as the hardware and software (terms in common use), and the third (to use a term which has now rather facetiously come into existence) the 4 li ve ware'. I shall try to describe what has been happening in recent 206</page><page sequence="2">FEBRUARY 1 969 A LAYMAN^ GUIDE TO COMPUTERS years in these three directions, and this may give an opportunity to introduce some of the specialist phrases which computer people use. The last thing I wish to do is to present you with anything resembling a shopping guide. Then I will turn to one or two lines of application which are likely to have a considerable influence on our lives in the not-too-distant future. One of these is the computer -assisted instruction, which I have chosen because of a personal interest in problems of education; another, if time permits, is the development of information services sometimes referred to as the public computer utility. It is now a somewhat trite and commonplace remark that the real value and importance of computers arises from the fact that they are information -processing machines, and not only supercalculators. And again that the computer revolution is one which involves an extension of man's mental capacities, in contrast to the industrial revolution which extended his physical capacity. I repeat both statements because they are profoundly true and essential to an understanding of the com- puter's place in the world. You will already be aware of various ways in which this is having a direct impact; how for instance your bank statements and payslips, electricity and gas bills are prepared by computer, newspapers and books are edited and typeset, how your plane reservations are made and checked, how you can solve your matching problems, whether of Christmas presents or girl friends. There are other more important applications of which you may be less aware: the control of stocks, the scheduling of building construction and of production lines, preparation of rail and 'bus timetables, analysis of surveys and questionnaires including the national census, generation of reports for managers, forecasting of sales and investment trends, the control of operation of machine tools, the tracking of rockets and satellites - the list is indeed a long one. And there are other applica- tions at a more experimental but very promising stage, such as those involving the direct control of processes going on in factories and plants, or the regulation of traffic in large cities. Let me not forget to add the possibility of improving administration and care of patients in hospitals and the general medical service. Some of these uses of computers may be fairly trivial in the effect they will have on our mode of living, or they may be technically rather simple. All involve in some degree the handling and processing of information, and depend for their effective- ness on the speed and accuracy with which this can be done. In no other sphere of activity that I know of has such a vast improvement in speed been achieved in such a short time : a factor of between one and ten million in less than twenty years, thanks to the very rapid response rate of electronic devices. HARDWARE We are past the era when it was sufficient to compare a computer to a body (the central processor), with two arms (input and output) two legs (the main store and the backing store), and something on top (the control unit). This anthropomorphic picture may still have some validity but the limbs of the creature have blossomed beyond belief, and it does less than justice to the software aspect which I shall discuss later. The simple analogy could be applied to a machine which dealt with one 207</page><page sequence="3">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 programme at a time, the programme and the data being fed in as a pack of punched cards or a reel of paper tape, packed away in the store, and the programme then executed instruction by instruction under the guidance of the control unit, until the results can be punched out or printed. It was sometimes possible for the author of the programme to sit at the console, watching the lights flash or listening to a hooter, and occasionally interfering with the course of events. This was the case with the first computer in the University of London - a Ferranti 'Mercury' - which had a life span of about five and a half years before it gave way to the 'Atlas' computer (about 100 times faster than Mercury) which is currently doing a substantial part of the University's computing. Atlas illustrates one of the major advances made in passing from first to second generation com- puters, the ability to process a number of programmes simultaneously - to be a ' multi-programming ' machine. The number of input units was multiplied so that information relating to several programmes can be read in at the same time, assembled and stored away for execution. Output units are likewise multiplied and handle the results of several programmes simultaneously. All programmes have to be processed by a single processor, and are therefore queued up for the purpose; but any programme may be interrupted by the control programme during execution if the central processor is held up for any reason, and can more usefully switch to another programme for the time being. Such switches may take place very frequently if as a result the central processor can be kept more continuously busy. Atlas is also referred to as a 'batch -processing' system. This implies that, once a programme has been read in the author can do nothing more about it until the results c√≥me back to him, and these may simply tell him that he has made a mistake in his programme. The term ' batch-processing ' arose from a method of processing in which a series of jobs were first stacked or 'batched' on a magnetic tape, and then read rapidly into the computer store to be processed in sequence. In Atlas this batching is done inside the computer, and because of the multi -programming feature the control processor is more efficiently employed. I mention this mode of operation because I wish to contrast it presently with 'time -sharing'. Before doing so it may be as well to say something about some of the newer input and output devices which have come into use in recent years. For batch- processing the devices which read punched cards and paper tape, and magnetic tape, are still an important medium of input, and also for some purposes, optical character -reading devices. Line printers are normally used for output. But many computer users, particularly in universities, were very restive under the restrictions of batch processing and looked for ways of getting back to the earlier situation in which the user sat at a console and had some control over what the computer was doing. This led to the idea of a multi-access system in which large numbers of individual user consoles are attached to a central computer, through which users can simultaneously transmit their progammes and receive results - and what is more, engage in a kind of dialogue with the computer about their problems. This is called the conversational mode of operating a computer system. 208</page><page sequence="4">FEBRUARY 1969 A LAYMAN'S GUIDE TO COMPUTERS The terminals used for this purpose include a simple keyboard-cum-printer device like a typewriter, usually referred to as a teletype, in which messages are sent through the keys, or more rapidly by reading a prepunched paper tape. The computer answers by printing out. A more elaborate terminal includes a cathode - ray screen on which information can be displayed either in character form (letters or numerals) or as pictures or graphs. Information may also in some cases be sent to the computer by a device called a light-pen, which is about the size and shape of a ball -point pen and contains a photocell. This can be directed to a point on the screen and the position of it is then relayed back to the computer. You will see this in action later. There are other devices such as Rand tablets on which drawings can be traced out on a mylar sheet by a stylus and again transferred to the computer store. Time -sharing is the name given to one system of operation under which these terminals can be used to advantage, and conversational computing can be developed. Very simply this means that each user is given very short but regular periods of time {time -slots) during which he can make use of the central processor, and also an immediate allocation of store in which to keep his programmes and data. He may also store these away in a backing store for long periods of time, where they may be kept in cold storage until he comes back hours or days later to continue his work. The central processor is kept continuously busy because there are many users working in this way at the same time. Many reasons have been given in favour of a time -sharing system , and I will cite a few, at the same time emphasizing that there are many information -processing problems for which batch -processing (or non -interactive computing) is still appropriate. (1) It provides a feeling of direct communication and control, even though the terminals may be many miles away. (Many demonstrations of using a time -sharing system have been made across the Atlantic.) (2) It enables many computer programmes to be written, tested and corrected (edited) directly from a keyboard, without the frustration associated with the longer turn-round times of a batched system. (3) It allows users to work at their own pace. (4) It is adaptable to many types of application, from the centralized data handling of banking operations, interrogation systems such as are needed by airlines, and design problems in which the designer wishes to see quickly the results of changing the parameters in his design. Ph.D. students have been known to keep their half- written theses in the filing system, and do all their rewriting and editing through remote consoles. A few successful time-sharing systems have been developed, and some are in fact operating in a commercial way already in this country, customers being able to rent a terminal and through a Post Office link use a computer belonging to the operating company. In my own Institute we have found this to be a most valuable way of teaching students some of the basic facts about computers and programming. 209</page><page sequence="5">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 SOFTWARE I should like now to talk about software, and will therefore gloss over other developments which may be important for the future, such as computer systems with more than one central processor, e.g., multiple systems in which each processor has its own store but all have common access to much larger stores ; also networks of computers linked together in various ways. Let me say that the next large computer system to be installed in the University of London early in 1969 will have at least three satellite computers attached to the central one, and a dozen or so outstations where programmes can be fed in and results received. I am taking for granted the technical improvements in storage devices and electronic circuitry which have led to speeds of operation 1000 times faster than those associated with the computers of the 1950s. These have also made possible much smaller computers, either of the desk calculator type or specialized com- puters for real-time applications. I must try to explain why software is so important, so that many firms now specialize in developing and selling it independently of those who design and make computers. Indeed many of us believe that hardware and software are separate industries, and that these components of a computer system should be costed and sold separately. I have frequently mentioned the work 'programme'. Let me remind you that the elementary operations which go on inside a computer are extremely simple, and may only consist in shifting bits of information (perhaps just strings of 'o's and ' i 's) from one part of the machine to another, or comparing one string of bits with another. These operations may be just as important as the basic arithmetic ones of adding, multiplying or dividing numbers. The machine is provided with a code of instructions which includes all these elementary functions. Writing a programme, in the most primitive sense, means stringing together such instructions in a way which, in combination with the appropriate data, will lead to a meaningful result being produced. The main reason for the great success of computers is that many millions of the basic operations can be carried through with a programme which itself consists of quite a small number of machine instructions. This is possible, of course, because these instructions can be used many times over without producing identical results each time. Regrettably I have no time to go into the details of this, but it is the essence of why a computer works. Writing a long programme in basic machine instructions is very tedious, although occasionally necessary. It was not long before more elaborate codes were devised, some of which are called assembly languages, which are still rather closely related to the structure of the machine code and therefore to the design of the machine itself, and some are now referred to as high-level languages (Fortran, Algol and Cobol being well-known examples). These high-level languages are to a large extent independent in their syntax and grammar of the structure of particular computers, and they use words and phrases which are more closely related to the accepted ways of formulating the 210</page><page sequence="6">FEBRUARY 1 969 A LAYMAN'S GUIDE TO COMPUTERS kinds of problem which the user wants to solve. They are said to be 'problem - oriented'. If I compare the instruction 'Add n ' which is an assembly code instruction meaning 'Add the number in the store register whose address is n to the number which is already in the accumulator' with the Cobol expression Take-Discount. Multiply Discount-Rate by Cost giving Discount; Subtract Discount from Cost giving Net which defines the operation Take -Discount, then you will have an idea of the qualitative difference between a high and a low-level language. There are other languages which have been designed especially for making conversational computing easy, for writing compilers or other specialized tasks. Now a programme which is written in a high level language must be translated into a form which the computer knows how to execute, that is it must be replaced by an equivalent programme of machine code instructions. This conversion is carried out inside a computer by a special programme which is usually called a compiler . To use computer phraseology, a source programme (which may be written in Fortran) is converted into a compiled programme (or object programme) by the action of the Fortran compiler which is already stored in the machine. We are beginning to get to the heart of what software means, which is, if I may use Professor Sidney Michaelson's expressive phrase, 'bringing your computer to life'. In addition to compilers an essential ingredient is the operating system. This is again a programme which carries out a great variety of functions. It keeps tabs on all the input units and responds to their requests for attention ; it assembles programmes, calling in the compiler when required; queues programmes up for execution, allocates storage, looks after transfers of information to and from magnetic tapes and other kinds of store; assembles output and channels it to the right output unit; cuts short programmes which go wrong or get out of control, prints out information to programmers about their mistakes, etc. All this and more is required in an operating system for a multi -programme computer. The Atlas supervisor, which carries out these functions on Atlas, is still one of the most sophisticated and effective programmes of its kind working anywhere in the world, even though it does not provide time -sharing facilities. Time -sharing brings other problems to the designer of an operating system. The solution of these in a way which leads to efficient use of the central processor has proved to be far more difficult than was expected at one time, and more than one computer manufacturer has come to grief on it. However, as I have said, some good systems exist which can service a moderate number of terminals, and most universities in this country with a sizeable computer are trying to add a dozen or so consoles to work in a time -sharing mode. LIVEWARE I hope I have made it clear that a computer system is not a working system without both hardware and software. The borderline between these is not always clearcut, 211</page><page sequence="7">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 and one meets the phrase ' hard-software ', meaning that some programmes may be more or less permanently wired in so that they can be used but not obliterated; alternatively it may pay to incorporate special circuitry to carry out some operations which might otherwise be done by a programme. However the system will also not work without people. Lady Lovelace said - in an effort to debunk the idea that a computer is superhuman - that a computer can do 'whatever we know how to instruct it to perform'. Perhaps we should also note that usually it must be told what to do. The flat -dwellers of Croydon who received gas bills three months after their gas cookers were forcibly removed could hardly blame the computer; it had the perfect answer, 'Nobody told me'. The development of computers has brought forth a new race of specialists. It is a very varied race, ranging from the hardware designers and engineers to data- processing managers and computer operators. It includes a large army of pro- grammers, of whom I would pick out especially those who design and write the systems software. There is a very large number of applications programmers who write programmes to solve particular problems - many of these may be specialists in other fields. Finally the availability of computers has made it possible to look again, in a wider sense, at the way we process information in commercial and industrial firms, in national and local government, and many other areas of adminis- tration. This has led to a large demand for the people known as systems analysts and designers. All this involves an enormous' problem of education and training, about which I could talk for a long time. It is a problem which I think we are solving in this country with a fair degree of success, although the number of trained specialists is still far short of what it should be. The problem is very acute in the universities, and before long it will reach down into the secondary schools also. To take the University of London as an example; here we have over 30,000 students. We ought to be giving to at least half of these - which would include all the scientists, engineers, economists and preferably some arts students - a practical introduction to the use of computers. This would involve at least 5000 new students each year. There is n√≤ doubt in my mind - and I hope to convince you also before the lecture is over - that the only effective way of putting over a genuine appreciation of what computers can do and how they do it, is through on-line terminals in a time-sharing system. If we take the arithmetic a little further and suppose that each student in his first year is allowed twenty hours on a terminal, then it appears that about 100-120 terminals distributed at strategic places in the University would provide this if attached to a good central computer with the right kind of operating system. If the students had more instruction in later years, then the need would go up corres- pondingly. The cost is not enormous - about ¬£20 per student per year, which is less than 3 per cent of the average cost of keeping a student at the university - but it could ensure that we become a with-it nation for the future. COMPUTER-AIDED INSTRUCTION One area of computer application which may before long have great significance for the general public is that of computer-aided instruction or CAI. The use of 212</page><page sequence="8">FEBRUARY 1 969 A LAYMAN'S GUIDE TO COMPUTERS computers in the learning process goes back about ten years, when some of the first experiments began in the United States in a few centres which were well equipped both with hardware and with computer and educational talent. Since 1963 one such centre has been Stanford University, where an extensive programme has been proceeding under the direction of Patrick Suppes. In a recent lecture in Edinburgh, Professor Suppes explained some of the reasons for developing CAI, saying: Perhaps the most powerful argument for CAI is the potential it offers in terms of individualizing instruction. The basic idea is simple and straightforward. It is to attend to the needs of each student on a real-time basis, to offer curriculum material and to respond to his work in a style which can be ideally represented by that of a sensitive and gifted tutor. He has expressed the same idea more extravagantly as follows: One can predict that in a few more years millions of schoolchildren will have access to what Philip of Maced√≥n' s son Alexander enjoyed as a royal prerogative : the personal services of a tutor as well-informed and responsible as Aristotle. This is of course a long-term aim and no one suggests that in the immediate future we shall be able to provide all of this on a computer. However, one can point to some of the early advantages of harnessing the computer to the educational task. First, it allows the pupil to work at his own pace, subject to some guiding control by the computer and by his human teacher. Secondly, because the computer system has a substantial memory it can save the teacher many of the time-consuming routine chores. Thus the computer can test the student's knowledge, record his performance, including the amount of curriculum covered, the number of correct and incorrect responses, the waiting time of responses, and so on. The teacher can receive written reports on each student and have more time to devote to the real tasks of individual teaching. Thirdly, the analysis of the vast amount of statistical data which these new methods will provide and for which the computer can also be used, will contribute greatly to our understanding of the learning process itself. At Stanford a considerable effort has gone into 'drill and practice' type pro- grammes, mainly concerned with elementary mathematics for children between the ages of 6 and 13. The terminal equipment used consists mainly of teletypes; there are clusters of these in Mississippi and Kentucky, tied into local computers which are themselves linked to a central computer on the Stanford campus more than 1500 miles away. In 1967-8 this system served more than 2000 students daily. Professor Suppes says of this type of instruction that an important aspect is that the student is immediately told whether his answer is correct. 'If he does not answer in time he is told that time is up, and the problem is repeated. This immediate correction procedure brings a briskness of pace that is often missing from classroom teaching.' Other teaching programmes are of the tutorial type, extending and adapting the methods of the programmed textbook and teaching machine. These lead the student through the material to be learned in a sequence which depends on his 213</page><page sequence="9">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 progress in understanding as shown by his performance in tests dispersed through- out the text. Again the computer offers the great advantages of student monitoring, of greater range and flexibility of programmes, and also the further possibility of combining visual with spoken instruction. The School District of Philadelphia is one area where computer-aided instruction has made considerable progress, developing from an intensive programme of computer education which by 1970 is expected to include all students (upwards of 70,000) in the senior and junior high schools. One CAI project is that known as project GROW, under the direction of Dr. Sylvia Charp, another pioneer in this field. This affects two senior high schools (Germantown and Overbrook) and two junior high schools (Wanamaker and Roosevelt), the initials of which provide the name GROW. Each school has a local computer with eight keyboard and visual display terminals, also equipped with light pens, and has adequate storage to contain all the material necessary for maintaining a lesson period of about 40 minutes for eight students. The school computers are linked to a larger central computer, where the main files of information are stored, and the student records are kept and analysed. The system has been brought into full operation during 1967-8 with teaching programmes in reading and biology ; over the next year or two it will be improved and integrated with the rest of the educational scheme, and assessed for its effectiveness in comparison with other methods. [Here the Lecturer showed some slides of Project GROW illustrating the equipment in use , and stressing that each pupil could be at a different stage in the teaching programme .] Returning to Stanford University, tutorial programmes are also in use there, both with teletypes and visual display terminals, often in combination with audio and film aids. Courses range from pre -school to university level, and cover subjects such as reading, logic, algebra and Russian. One experiment, carried out in the Brentwood district near Stanford, has led to interesting comparisons between students of low ability following the CAI approach and those following a conventional teaching programme. [The Lecturer then showed a short film of the Brentwood Experiment .] The Brentwood experiment, although valuable and interesting, is too costly to be emulated on a large scale. One of the most serious problems of CAI at present is that of cost, and in the United States the aim is to reduce the annual cost per student to about $25 or less, which would then not exceed 5 per cent of the total average cost per student. With the drill -type programme Professor ≈†uppes claims to have achieved $50 per student, and other projects are reported to be working even more cheaply. Another major hurdle is the initial investment in curriculum design and testing; the programming costs of 100 hours of material for a one -year course may be as high as $200,000. However, I am sure that these software costs are unnecessarily high, and will also be reduced. In Britain experiments with CAI have not progressed as rapidly, largely because of the lack of multi -access systems with suitable terminals. It is encouraging to 214</page><page sequence="10">FEBRUARY 1 969 A LAYMAN 's GUIDE TO COMPUTERS find at least one school, the Thomas Bennett School in Crawley, Sussex, which is starting to use visual display and keyboard terminals, and also that the Department of Education and Science has approved a much larger scheme for Hertfordshire schools, based on Hatfield College of Technology. INFORMATION SERVICES Another area which may directly affect the layman is the provision of public information services. Already these are being very seriously considered because the time-sharing principle, and the sharing of files of information, is clearly capable of extension to large numbers of users. It is assumed that members of the public would rent terminals to a central information system, which might be a hierarchy of computers associated with large data banks of information. Subscribers would dial their requests, and the information would hopefully be displayed on their TV screen. This might be only the time-table of trains from London to Leicester, or the availability of seats for next Thursday's opera at Covent Garden. Or you might wish to read the latest novel in the library, or somebody's review of last night's concert in the Festival Hall - perhaps even the state of your bank account. Anything which can be transmitted over P.O. lines at a speed which meets your requirement could in principle be included in the service, provided you know the right way to ask for it. The development of data transmission facilities is of course essential, but these are coming. There are no doubt very considerable software problems to be faced, which is one reason why I would attach a lot of importance to providing good systems programmers. However, some braver spirits are thinking that members of the public may wish to insert their own programmes into the system. Here I feel I cannot do better than quote from an article by John Macarthy* of Stanford University: It may be supposed that, as happened with television and then colour television, the enthusiasts and the well-to-do will be the first to install computer consoles in their homes. Eventually, however, everyone will consider them to be essential household equipment. People will soon become discontented with the 'canned' programs available; they will want to write their own. The ability to write a computer program will become as widespread as the ability to drive a car. Not knowing how to program will be like living in a house full of servants and not speaking their language. Each of the canned programs will be separately useful. It will be up to the individual, however, to co-ordinate them for his own fullest benefit. People will find, in fact, that console control of a process leads directly to the writing of one's own programs. At first the computer says in effect: I can do the following things for you, which do you want? You reply. Then it says: In order to do this I need the following information. You respond and the dialogue continues. After you get used to using a particular facility, the computer's questions become annoying. You know in advance what they will be and you want to give the answers without waiting for the questions. Next you want to be able to give the entire sequence of actions a name and bring forth the sequence by typing only the name. As you become bolder you will want to make a later action conditional on the results of earlier actions and to provide for the repetition of actions until a criterion is * Scientific American , September 1966. 215</page><page sequence="11">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 reached. You are then already programming in full generality, albeit awkwardly. As a skill, computer programming is probably more difficult than driving a car but probably less difficult than flying an airplane. It is more difficult than arithmetic but less difficult than writing good English. It does not require long study. Many people can write simple programs after an hour or two of instruc- tion. Some success ordinarily comes quickly, and this reward reinforces further effort. Programming is far easier to learn than a foreign language or algebra. . . . Writing a program to carry out some activity requires that an individual make explicit what he wants. The public-utility computer will do exactly what it is told to do within limitations imposed to protect other people's interests. A person who has experienced the unexpected and sometimes unpleasant consequences of the faithful execution of his wishes is usually ready to re-examine his preferences and premises. Fortunately programs can be readily changed. As people acquire greater control over their environment by explicit programming they will discover greater self-understanding and self-reliance. Some people will enjoy this experience more than others. DISCUSSION the chairman: On the question of language and the pace at which concepts of programming are developing - is it not likely that we shall have situations in which somebody may propose what is technically a very good language, but, because there is so much investment already in existing languages, this technically good language never has a chance to prove itself? How do we overcome this kind of institutional difficulty? the lecturer: If the new language has real technical advantages over an existing one, then the first stage is to make it easily available on a variety of computers. Once it is available for use then I think people will use it for its real advantages. This is where the development of techniques for writing compilers easily for new languages becomes very important. I think these are well on the way. MR. R. D. PARSLOW (Brunei University): Perhaps the Ministry would back such languages with the money to enable them to be formulated? the lecturer: Public bodies are prepared to do this. At the Institute we are hopeful of being able to develop one language in this way with outside support. MR. —Ç–æ–º jones : I speak as a layman to whom this paper has been addressed. I should like to ask Dr. Buckingham if he doesn't think that the proliferation of computers tends to destroy the capacity of the ordinary human being to think? This lecture was announced in last month's Journal of the Society, in which the (single subject) arithmetic examinations results were given. More than 23,000 papers were worked ; about ten per cent passed in the first class, and the rest of them either failed or were placed in the second class. But it is not only quite young people we are talking about. The Prime Minister in his Mansion House speech in November last year spoke about the dock strike. 'And I should perhaps draw the attention of this expert audience to a strange quirk in our method of recording trade figures. If a ship comes in to a strike-bound port, the import documents are immediately passed through Customs and recorded as imports, while exports waiting to be loaded in a warehouse a few feet away remain unrecorded.' ( The Times , November 14th 1967.) It wasn't quite true at the time but a year later it was still more untrue. The Economist of August 17th 1968: 'It is now apparent that the claimed improvement in June was mostly a mistake. To a greater extent than the Board of Trade knew or admitted, imports were then being held back in the warehouses, so that they would pass through customs after the Kennedy round cuts in tariffs on July ist.' Yesterday the same set of figures was discussed by the London and Cambridge Economic Bulletin : ' It 216</page><page sequence="12">FEBRUARY 1 969 A LAYMAN'S GUIDE TO COMPUTERS is worth noting that the effect of the dock strike in 1967 may have caused exports in that year to be some ¬£ioom. less than they might have been and to make exports in 1968 some ¬£ioom. more. The true deficit in 1968 may, therefore, be a further ¬£200m. worse than in 1967.' The Chairman referred to our Lecturer's association with the C.D.C. 6600 Computer. I had not heard about this computer until I saw a half-page advertisement in The Times last Monday. It began: 'By the time an expert with a slide-rule had worked out 24x365^8,750 SIA's computer would have done it 10,000,000 times.' Now 24 by 365, as I found out by reference to a small grandson of mine, is the number of hours in a normal year. He got the answer right but he also pointed out that it must have been worked out last year, because this year is a Leap Year. So the answer was right for last year but wrong for this year. And if the computer had done the same calculation 10,000,000 times it would have been wrong 2,500,000 times - on the assumption that we shall continue to have one Leap Year in every four years. Doesn't it seem to the Lecturer that a knowledge of basic arithmetic is still important? the lecturer: I agree that it is still necessary to learn to think! One of the advantages which is claimed for teaching programming is that it does just this. It has been suggested that the discipline of learning to programme is the modern equivalent of learning Latin. One of the reasons is that as soon as one writes a programme and puts it actually into a computer and gets the results, one finds out how easy it is to think wrongly. It is a very cogent discipline to develop a computer programme to the point at which it actually produces the answers which you know it ought to produce. This is a basic training in logic, and one of the best reasons for thinking seriously about introducing this kind of study into schools. A computer as a rule gets its arithmetic right - perhaps more often than a human being, and I would question whether the examples you quoted are really the fault of computers but rather, as you suggest, the fault of bad thinking. miss –∫. BATTERSBY : Is there any way in which a layman can easily learn a little bit about how best to compose a questionnaire for programming? the lecturer : There exist quite a large number of programmes which are designed for this particular purpose of defining and analysing questionnaires. If you seriously want to do a particular job in this direction and you have a friend in the university, he can probably introduce you to someone who could explain a particular system for writing such a programme, and what is required in the way of special format and data. There are also quite a number of computer bureaux which would do it for you. MR. c. p. dear, M.C., F.c.A. (Unilever Ltd.) : It is apparent that Professor Buckingham has spoken from a university standpoint, and I imagine the amount of investment in programmes that has enabled him to give the service he has described to students would be considerably less than that which a major business faces in establishing comprehensive data banks for its information purposes. What I am wondering, in a general sense, is where we are heading as a society. It seems to me as though we are climbing up a mountainside which gets ever steeper in terms of increasing investment necessary to produce the wherewithal to attain our objective. I should like the Lecturer's view of the resources needed to get the sort of things he pictures. the lecturer: May I ask if you are thinking particularly of the software? MR. dear: Yes. the lecturer : The first thing is to get an adequate number of trained programmers, particularly those who are aware of the problems of writing software systems for the computer. As time goes on, a much larger number of programmes will be available to meet the need of a large number of people - software packages which will do specific jobs, and some of these may be tailored to the needs of commerce and 217</page><page sequence="13">JOURNAL OF THE ROYAL SOCIETY OF ARTS FEBRUARY 1 969 industry. There is a technical problem here of making the packages work on a variety of machines, so that you don't have to rewrite the whole system if you change your computer. This again is one of the problems which I am sure will be solved, and reduce the gradient of your slope, but to a large extent our progress in this direction is controlled by the rate at which we can develop the adequate software. MR. L. prechner: I should like to pass one comment and ask a question. The comment is that the social implications of computers are enormous as regards increasing the gap between developed and undeveloped countries, particularly between the United States and other countries. The question is perhaps frivolous. If you go abroad on holiday, and take a micro-computer in your pocket, will you ever be able to have a conversation with a native which can be translated at once? How far away are we from that? the lecturer : There was a lot of hopeful talk a few years ago about translation from one language to another by computer. One doesn't hear quite so much nowadays, and I think this is one of the dreams which is fading a bit, although of course at the more elementary level a great deal of translation goes on in the kind of operation which I referred to in connection with compiling. This translation is very much simpler, dealing with a very well-defined syntax, grammar and so on. I don't think you will be able to carry on your foreign conversations like that for a very long time. As to the gap between developing countries and the United States, of course we know the gap exists, although it is a fluctuating gap to some extent. We have to remember that some of the earlier, most important work, particularly on the programming side, was done in this country, and the gap which we are rather conscious of is the gap in producing hardware in large quantities. My own feeling is that there is a great deal which a country like this can do in closing the gap on the software side. We already do a great deal of software engineering. MR. j. c. Heywood, B.sc., M.i.E.E. : Has Dr. Buckingham any views as to the age at which children should be exposed to computers? the lecturer: I believe it can be almost as early as you like, and I am sure that the method of instruction which I showed has a useful purpose. I have heard it said by an enthusiast for the early introduction that it was possible to teach a child of 4 or 5 to write a computer programme before he could write good English. MR. p. c. Stevens, M.A. (City and Guilds of London Institute): It has been suggested that much of the investment in computers in this country up to now has been for prestige reasons; and really, from the point of view of the layman, what definitely needs to be known now is what sort of problems computers can best solve. the lecturer: I should have to give another lecture to answer that! One of the answers surely is that if you have a problem that you want to do, then you will first of all ask whether the computer could do it more easily than some other method. MR. stevens: We presuppose that the problem can be numerically stated, but is very long? the lecturer : Rather one should ask, can it be logically stated? If it can, then it is certainly amenable to treatment by computer. Obviously, some logical problems are more difficult than others. Computers are programmed to play chess, but this does not necessarily mean that a computer is the best chess player you can find. mr≈°. E. E. LiPMAN : I wonder if Professor Buckingham could explain briefly how the computer works physically? the lecturer: That is difficult without a lot of visual aids. I don't think it is necessary to delve very deeply into the engineering of a computer in order to under- stand how it works. In fact, one of the best ways is to work with a simple machine code; write the programme for the computer and at the same time try to follow 218</page><page sequence="14">FEBRUARY 1 969 A LAYMAN'S GUIDE TO COMPUTERS how the computer deals with the programme. This can be done on a purely logical level, and not on a physical level, for which you have to go into the detailed circuitry of the machine. mr≈°. lipman: Can you explain the basic principles? the lecturer: Normally information inside the computer is represented simply by streams of noughts and ones. One of the first steps, therefore, is to understand how information is coded in binary digits; then how it can be stored, how it can be transferred to and from the register in which actual operations take place (like arithmetic) or the registers which just hold information, which can be fetched and carried. Then one would have to consider how the instruction code of a computer is built up from very elementary operations, and how you incorporate these into a programme for solving a particular type of problem. There is a great deal to be explained about how the input and the output are handled, getting information into the machine, getting it out again, and the whole business of executing a programme instruction by instruction, and how this is carried out under the guidance of the control unit. All these different aspects have to be gone into before you can really expect to understand how a computer works. the chairman: Perhaps I may draw out one or two points which seem to me particularly important. People ask, 'Where is it all going to stop?' At present one can reckon that we spend perhaps three hundred million pounds a year on computing in this country; that is, a hundred million on hardware and another couple of hundred million on software and application work. This is about 1 per cent of our G.N. P. I think many people in the computer world would feel that the equilibrium level will be perhaps 10 per cent of the G.N. P. So that means five to ten times as much of our resources devoted to computers. There will be improvement of performance, of factors of ten, a hundred, a thousand, probably, and there will of course be much greater skill in the organization of applications. So really the future intensity of usage is quite unfore- seeably high in relation to the present. Does the poor human being face being left miles behind? I don't think so. In fact the standards of education and attainment are rising very rapidly indeed. To take the standard basic test of reading ability. The standard that 10 per cent of fifteen-year-olds failed to meet in 1940, only 1 per cent failed to meet in 1950; and you get the same improvement at whatever level of cut-off of education you care to take. If you go on to the graduate level, there will be qualifying in 1980 eight times as many professional people as qualified in 1940. That means there will be eight graduates, or eight professional men, for every one that there was a working generation ago. And, of course, with this rising level of educational attainment goes an evolving attitude to the techniques that are available to him to use, including computing. It is a very natural tendency now to score off computers, just as people no doubt once upon a time thought to score off motor cars, comparing their performance and reliability with that of a horse. They don't often do that now! One would expect a perfectly normal workaday relationship between the human being and the various lumps of hardware and technique which will be open to him to use. Perhaps one of the most important contributions of computers is to help us to understand ourselves - not just the way in which we are organized physiologically, but the way in which we think and develop concepts and attitudes. I think it is fair to say - I stand to be corrected by Professor Buckingham - that this is one of the horizons that we have yet to penetrate in the computer world. Thank you very much, Professor Buckingham, for a fascinating lecture and for the way you have answered the questions this evening. The vote of thanks was carried with acclamation and , another having been accorded to the Chairman y the meeting ended . 219</page></plain_text>