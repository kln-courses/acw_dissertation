<plain_text><page sequence="1">Principles and Heuristics for Designing Minimalist Instruction Hans van der Meij Twente University John M. Carroll Virginia Tech (VPI &amp;-SU) SUMMARY The minimalist approach that we advocate has received widespread attention as a better way to develop training and information (e.g., manuals, online support). Empirical studies support its claims of effectiveness, but they also point out that practitioners find it hard to develop minimalist instruction because of a lack of specific guidelines. In this paper, we offer a comprehensive overview of the principles and heuristics that can be used to create minimalist instruction. These principles and heuristics are illustrated by examples from various task domains and for different kinds of supports. In many cases, they are accompanied by a theoretical rationale or some empirical background information. The principles and heuristics are presented not as rules to be followed strictly, but as suggestions on how to create minimalist instruction in different contexts and for different audiences, applications, and purposes. Minimalist instruction is heavily learner oriented. It takes the need learners have for meaningful activity and sensemaking as the primary requirement and resource for designing effective training and information. Of course, no serious approach to the design of instruction would set out to ignore or thwart these needs. But for many approaches, objectives of logical decomposition and structuring ultimately subordinate learners' preferences and propensities. This article has been peer reviewed. Research has repeatedly proven the effectiveness of minimalist instruction (Black et al. 1987; Carroll et al. 1987; Carroll 1990b; Frese et al. 1988; Gong and Elkerton 1990; Lazonder and Van der Meij 1993; Oatley et al. 1991; Ramsay and Oatley 1992; VanderLinden et al. 1988; Van der Meij 1992; Wendel and Frese 1987). However, since the conception of minimalist instruction in the early 1980s, only a limited number of its ideas have found their way into more conventional approaches to instruction. One of the obstacles to a wider application is that the minimalist design principles sometimes lack the detailed specification practitioners expect (Hallgren Technical Communication , Second Quarter 1995 243</page><page sequence="2">1992; Horn 1992; Nickerson 1991; Tripp 1990). In this article, we present a comprehensive overview of four major principles of minimalist instruction and their corresponding heuristics. The minimalist ideas presented here are primarily intended for the instruction of the novice learner or of users who are becoming acquainted with a new application or tool (e.g., word processor, object- oriented programming language). But their usefulness is restricted neither to this audience, nor to the writing of tutorials (whether on paper or online). Instead, we believe they are suited for optimizing instruction in general, and illustrations are offered to support this stance. The minimalist principles and heuristics are to be taken as guides and grist for thinking about instruction rather than as prescriptions to be followed strictly. The heuristics offered are our solutions to design problems; as such, they should be concrete enough for readers to follow in developing their own minimalist instruction. At the same time, they do not fully detail everything there is to know, nor do they guarantee success in all situations. Some problem solving will always be needed. As environments, programs, audiences, and purposes of instruction vary, there will always be a need to adapt the design to particular situations, to incorporate other, new ideas, and to not follow some of the suggestions. Indeed, for this very reason, we speak of principles and heuristics rather than of norms, standards, guidelines, criteria, rules, or prescriptions. Some of the descriptions already suggest a varied usage as we show that certain heuristics are better suited to the design of manuals, whereas others have more to offer for (re)designing the programmatic support to users. To enhance the readers' understanding of these ideas we introduce them with a mixture of theoretical and empirical background information. Throughout, we will show that the heuristics have a strong bond with theoretical models, that they hinge on observations of users, or that they have proven their usefulness in comparative experiments. In addition, numerous examples are given to detail how particular heuristics can be used. The majority of these examples are drawn from the main fields of study in which we are working - that is, the design of manuals for word processors (i.e., WordPerfect 5.1 ) and the design of an instructive environment (paper and online) for an object-oriented programming language (i.e., Smalltalk). Together, they illustrate the wide range of situations in which the design principles and heuristics of minimalism can be applied. An overview of the four major principles and their corresponding heuristics is presented in Figure 1. We have tried to describe each section (i.e., principle or heuristic) as an independent unit as much as possible to allow readers to browse, skip, scan, read, and study this article in the way that best addresses their personal agenda. Principle 1: choose an action- ORIENTED APPROACH People trying to learn a skill are eager to act, to do something meaningful. This eagerness to act is at the heart of their motivation to learn the skill, but it is also the source of a fundamental production paradox (Carroll 1990a, 1993). To learn to do, it may be psychologically necessary to act. At the same time, we can clearly see from their misconceptions and errors that users need to learn so as to act (Carroll and Rosson 1987). Designing usable materials will, therefore, require a constant balancing of the learner's need to act with the learner's need for knowledge with which to plan and evaluate action. To manage the production paradox, we must always make genuine activity available to the learner and scaffold, stage, and structure this activity to ensure that it is tractable and understandable. Minimalist instruction is always action oriented. It is a priority in designing such materials to provide users with an immediate opportunity to act meaningfully (Carroll 1984, 1990b; Carroll et al. 1987). Minimalist instruction should also encourage and support user exploration and innovation (Van der Meij 1993a) and respect the integrity of the user's activity. We consider these points in turn below. Heuristic 1.1: Provide an Immediate Opportunity to Act A priority in designing minimalist instruction is to invite users to act and to support their action. Of course, instruction for skill domains always seeks to support user activity, but, very often, it does not make immediate activity a high enough priority. For example, tutorials often begin with an explanation, an account of how the application works, how the instruction works, or an orientation to the semantics of the domain. Such explanations are valuable to the learner, of course, but, positioned at the very entrance to the manual, they constitute a distraction. The 244 Technical Communication , Second Quarter 1995</page><page sequence="3">Principie 1: Choose an action-oriented approach Heuristic 1.1: Provide an immediate opportunity to act Heuristic 1.2: Encourage and support exploration and innovation Heuristic 1.3: Respect the integrity of the user's activity. Principle 2: Anchor the tool in the task domain Heuristic 2.1: Select or design instructional activities that are real tasks. Heuristic 2.2: The components of the instruction should reflect the task structure. Principle 3: Support Error Recognition and Recovery Heuristic 3.1: Prevent mistakes whenever possible. Heuristic 3.2: Provide error-information when actions are error-prone or when correction is difficult. Heuristic 3.3: Provide error-information that supports detection, diagnosis and recovery. Heuristic 3.4: Provide onrthe-spot error-information. Principle 4: Support reading to do, study and locate Heuristic 4.1: Be brief; don't spell out everything. Heuristic 4.2: Provide closure for chapters. Figure 1 . Four major principles and their heuristics for designing minimalist instruction . learner is confronted with prerequisites to action instead of the opportunity to act. An alternative approach is to begin by giving the user less to read but more to do. The manual may, for example, first present a simple but realistic activity that conveys some of the explanatory content and then follow this with the balance of the explanation. In this approach, the learner still gets the explanation, but does so after having been given a chance to experience an activity. Providing immediate opportunities for action is so central to minimalism that any example of minimalist instruction would illustrate it. An example is the Minimalist Tutorial and Tools for Smalltalk (MiTTS) (Rosson et al., 1990, 1993). MiTTS consists of a brief tutorial to be used in concert with a set of programming tools and instrumented programming projects; it is directed at giving programmers experienced with traditional "procedural" languages (like PASCAL and C) a rapid introduction to the object-oriented language Smalltalk. The manual is 35 pages long and is used in conjunction with an instructional environment that opens itself with a graphical animation of the Blackjack card game. The intention is that both the slender manual and the graphical demo will impress the user as invitations to act. In MiTTS, the programmer is exercising real code in the Blackjack application within 15 minutes of starting, and in 2 hours, the programmer is making changes to its design and implementation. After 4 to 6 hours the programmer is working on open-ended projects enhancing other applications and their graphical user interfaces in novel ways. In many comparable tutorials for programming languages, students must endure a descriptive overview and rationale for the language they are learning and the instruction they are using before they get to do anything. For example, the instructional manual that accompanies the Smalltalk software (Digitalk 1989), a highly refined commercial manual that we take as representative of the state-of-the-art, begins with a Technical Communication , Second Quarter 1995 245</page><page sequence="4">substantial sales-pitch for object-oriented programming and a detailed argument that Smalltalk is more efficient to write than is PASCAL. In our minimal manual for WordPerfect (Lazonder and Van der Meij 1993; Van der Meij 1992, 1993; Van der Meij and Lazonder 1992), users receive their first instructions to act on page 2. Again, the contrast with other manuals is striking. A brief inventory of 10 commercially available tutorials for WordPerfect reveals that, on average, they give the first instruction on page 15 (not counting the title page or the table of contents). Even if we exclude one extremely long- winded tutorial in which users start doing something on page 56, the other manuals still required users to read 7 pages more than our minimal manual. In general, we feel that it is important to take seriously the idea that users are never convinced by talk alone. Documentation should become more compatible with guided tours and graphical user interfaces that provide users with a direct access to "things." Users who bother to pick up the manual at all are probably more than ready to be convinced by example activity. Heuristic 1.2: Encourage and Support Exploration and Innovation Users should always feel in control of their own activities. People are more engaged by self-directed activity; they prefer it and they learn more from it (Carroll 1990b; Kluwe et al. 1990; Mack et al. 1990; Rettig 1991; Van der Meij and Van Stapele 1993; Wendel and Frese 1987). Minimalist instruction provides users with opportunities to act that are, to the greatest extent possible, under the user's control (Carroll et al. 1987; Van der Meij 1992). These are not unguided explorations, however, because such activities can be very ineffective and frustrating (Carroll 1993; Charney and Reder 1986; Charney et al. 1990; Williams and Farkas 1992). Likewise, these are not instructions that ask users to perform exercise steps couched at a very low level, because such activities are perceived as trivial and unengaging. In minimalist instruction, we try to strike a balance between activities that are sufficiently open-ended for users to understand and undertake as meaningful projects and yet are defined clearly enough that users can orient to specific goals and, perhaps, specific methods in pursuing activities. We will illustrate three points in this respect: use a language that invites users to explore; consider carefully when users should be offered suggestions for other strategies; and focus more on student evaluations and less on expert evaluations. In various places in our WordPerfect manuals users are encouraged to try things out for themselves (Lazonder and Van der Meij 1993; Van der Meij 1992, 1993; Van der Meij and Lazonder 1993). A critical aspect of these action prompts is the specific way in which they are formulated. Users are clearly given the message that exploration is welcome, as most action prompts are accompanied by expressions, such as "Please try it," "Try and see for yourself," and "See what happens," that invite users to act. In contrast, when conventional manuals describe alternative options they tend to use relatively neutral statements. They describe rather than invite (e.g., "You can also . . ." and "Another possibility is . . ."). This difference in style makes the minimalist action prompts more seductive. Our research indicates that the inviting action prompts in our minimal manual lead to 33% more explorations than do the descriptive prompts in a conventional manual (Van der Meij 1994; Van der Meij and Lazonder 1992). One of the situations in which users are especially receptive to suggestions about other strategies or possibilities is immediately after completing a project. For this reason we decided to create a "Guru" (an expert programmer) that users could call up at the end of a tutorial project in Smalltalk programming. This Guru (Alpert et al. 1994) was designed to help novices exploit more fully the capacity of existing (sub)programs (classes and methods in Smalltalk ). For example, many novices would fail to use the existing "Arrays" class to create an array of integers by changing just one line of code. Instead, they would create a completely new program. The Guru was intended to suggest to users the more efficient use of the inheritance mechanism in Smalltalk and to convey the insight that the expert strategy is easier to maintain. We believed that users would be in the best position to appreciate these insights after having practiced creating their own code. For any nontrivial programming problem, there are infinite solutions. Indeed, students are often highly engaged by the "task" of fooling instructional systems that purport to be able to evaluate programming solutions. One solution to this problem is to focus less on evaluation of student efforts. Particularly for new users, it may be more important to obtain an interpretable result than an exactly correct one. Thus, instead of checking the student's program line by line, the instruction could indicate some tests and criteria or provide an "instructor's 246 Technical Communication, Second Quarter 1995</page><page sequence="5">solution" and allow the student to do the evaluation. If the student is satisfied, or if the program produces the right results at the level of the tests and criteria, we can consider it a correct result. It probably is close enough. We are taking an approach like this in current work designing a tutorial system for the skill of object-oriented software design. This design skill is so complex that managing and evaluating student efforts closely would force us to trivialize the projects. So, instead, we decided to instruct at a very conceptual level and to provide checkpoints at which the student can measure a design against a teacher's solution annotated with its design rationale (Robertson et al. 1994). We encourage comparisons but candidly note that many correct solutions are possible. We offer one solution only to help the student reflect on his or her own work. In this approach, we have off-loaded the management and evaluation task to the student, thereby turning it into a further learning activity. The optimal balance point between instructing and supporting exploration and innovation may vary considerably from project to project. One important factor to consider is the guarantee of safe progress. It is stimulating to veer off the prescribed path only if users have some confidence that the prescribed path is still there and that it can be rejoined. In providing immediate opportunities for action, it will also often be useful to scale down the initial problem space in which users will be acting (Carroll and Carrithers 1984). Under these circumstances, explorations support active elaborations that can be very effective in promoting comprehension and memory. Heuristic 1.3: Respect the Integrity of the User's Activity To the designer, the learner's activity can often seem ancillary: the designer's goal is to impart information and to help the user develop skill and understanding. It is critically important for designers to keep in mind that the moment-to-moment goal of the user may be much less sophisticated and more short term (Carroll 1990a, 1990b; Hill 1989; Landauer 1988; Mack et al. 1990). Instruction and documentation must respect the integrity of the user's activity. In some cases, this will mean subordinating the presentation of information or explicit instruction to the continuity of the user's project-oriented activity. A variety of passive help techniques that support this heuristic have been developed. For example, with the release of the new operating system for the Apple Macintosh (i.e., System 7), Balloon Help was introduced. This Help appears only on request; users must select the "Show Balloons" command from the Help menu. When they do, objects are documented as the cursor sweeps over displayed objects. Thus, Balloon Help mimics the main purpose of a glossary, providing users with the meaning of an object at any point in time (Brockmann 1990; Farkas 1993). We, too, have experimented with passive help tools in some of our recent systems. Our work on the MoleHill intelligent tutoring system for Smalltalk illustrates two ways to offer help without imposing on the users (Singley et al. 1991, 1993). MoleHill's GoalPoster (Figure 2) displays a best- guess analysis of the user's programming plan. This goal analysis can be used, for example, as an aid for reflection and as an index into help facilities (Singley et al. 1993). We leave it to the user to decide whether to use or ignore the goal analysis, because we cannot be certain it is the correct analysis - unless we ask the user - and because we can never be certain when the time is right to interrupt the programming project to initiate a dialogue about programming plans. MoleHill's Commentator takes a similar approach in documenting the code for particular classes and methods (Figure 2). The Commentator inhabits a small pane in the MoleHill window and passively displays stored documentation for the currently selected chunk of code. It makes a best guess as to which coherent code structure the user meant to select (this is indicated to the user by a lined box, drawn around that code constituent). The corresponding documentation is displayed in the Commentator pane. It can be ignored, but it can also be annotated; it is user editable (Singley et al. 1991). Thus, far from interrupting the user's activity, the Commentator offers itself as a resource to be employed for the user's purposes and interests. For example, in Figure 2, the user has selected the "s" in the Smalltalk message "is Gap Selection." The Commentator parses the line of code and determines that "Gap Selection" is the smallest meaningful code constituent; Therefore, it displays a comment for that constituent (see the pane at the bottom of the MoleHill window). To respect the integrity of users' activities , designers must often step aside a bit. They can create help, but they should not impose this on users. However, this does not mean that users cannot be seduced into Technical Communication , Second Quarter 1995 247</page><page sequence="6">Figure 2. MoleHill, the Smalltalk tutor ; presents passive help to users in different ways. In the lower left, one can see the Goal Poster, which offers a best-guess of a programmer's plan. The lower right view is the Commentator tool , which "explains" the currently selected code. other actions. If the designer succeeds in creating effectively meaningful activities for the user, these will become genuine to the user. At any instant, they will become the activities to which the user is committed. Principle 2: anchor the tool in the TASK DOMAIN For most users, an application is a tool they want to use to achieve objectives in the task domain for which that application has been designed. The tool is merely a means; it is almost never an end in itself. For example, the user of a hypertext application may be interested in gathering and organizing notes for a report. Such a person is not, fundamentally, trying to build a card stack or a relational database; these are merely vehicles for the person's real concern. This observation is implicit and obvious to the user, but it can easily escape the writer. Instructions are often written as if the tool itself were the user's principal objective. For example, one HyperCard manual presents, on its second page, an argument that card stacks are more flexible than relational databases before the reader has ever been allowed any experience with a card stack! This, of course, is much like the introductory statements of tutorials for word processors making promises to novice readers about the wonderful possibilities of macros. Such an approach can be distracting, even confusing, for users; but, perhaps worse than this, it may increase anxiety (e.g., "This is too difficult for me") and waste the opportunity to leverage the user's intrinsic interest in and knowledge about the task domain in instructing on the use of the application. Minimalist instruction is always anchored in the task domain. To the greatest extent possible, tasks are selected from the core tasks of the application domain (Carroll 1990b; Van der Meij 1992). The users' interest in and understanding of these tasks is what motivated their original interest in the application. Building the instruction from within such tasks both capitalizes on this original motivation and helps to satisfy it. The basic tasks of a domain provide a structural template for learning activities; they are a 248 Technical Communication, Second Quarter 1995</page><page sequence="7">rubric and a meaningful context for the presentation of information. In addition, they provide concepts and terms with which to present and explain an application. Two enabling heuristics are enumerated below. Heuristic 2.1: Select Or Design Instructional Activities That Are Real Tasks We recommend presenting the user with instructional activities that can instantly be recognized as genuine (Carroll 1984, 1990b, 1993; Van der Meij 1992). These tasks can be quite modest. For example, early on in the documentation for Northern Telecom's Norstar system, the task of customizing the ring on one's own telephone is suggested (Figure 3). This is a very elegant idea. Office workers may be unsure of the scope and potential utility of a telephone system like Norstar, but they will immediately understand the task of changing the ring signal on their own phones. In addition, the procedure required to accomplish the task is quite simple and the result is concrete and personal. Thus, the task is a meaningful achievement in itself. It suggests a general action schema for further interactions with the system, and, perhaps most important, it may help orient and interest the user in identifying and attempting other tasks. The programming domain is of special interest with respect to providing real tasks, because it is so general. It is not obvious what the core tasks of programming are, in the sense that it is obvious that the core tasks of word processing are creating, revising, and printing documents. One approach we took to remedy this was to guide students to create small applications or to provide them with applications and suggest that they extend or debug these. We have created a set of small games for this purpose (Tic-Tac-Toe, Gomoku, Blackjack). For example, we presented a graphical Gomoku game with a special stealMove method that permitted the game to occasionally take two moves at once. The bug was fairly obvious and easy to correct, but repairing it is a representative programming task and the results of making the correction are immediate and tangible. In word processing, sample files can be used to get users to work on real tasks without burdening them with too many "additional" activities. For example, users may be offered templates that help create a fully formatted text but that do not hinge on Figure 3. An illustrative page from the Norstar system is shown. Brief explanations next to the headings make the goals accessible and understandable. Note the early positioning of customizing the ring signal. Meaningful tasks early in the manual help build a general schema and increase the chances that users will continue reading. having to specify all the codes for headings, fonts, or margins. Users can also be stimulated to change some formatting codes to accommodate their own particular situations. Similarly, tutorial programs may present users with a paper manual that asks them to activate and make changes in training diskettes with sample files. It is important to remember that users will be able to recognize an activity as genuine only to the extent that they have had adequate prior experience in the task domain to underwrite such a judgment. Therefore, to most effectively capitalize on the users' interests in and knowledge about the task domain, instructions must build on their prior skills, knowledge, and experience by directly recruiting those scenarios and procedures Technical Communication , Second Quarter 1995 249</page><page sequence="8">of the task domain that are familiar to the user. (Carroll 1990a, 1993; Davis Baker 1988; Kay and Black 1990; Mack et al. 1990; Ramey 1988). Heuristic 2.2: Components of the Instruction Should Reflect the Task Structure The structural organization of a manual, often codified in its section headings, is salient to the user and can be a powerful resource to the instructional designer (Byrnes and Guthrie 1992; Hager 1992; Hartley 1985, 1990; Matchett and Ray 1989; Spyridakis and Wenger 1992; Wright 1987). The headings should therefore be crafted to convey deliberately and clearly the major procedural elements in the instructional tasks. Such headings help the user keep in view the big picture of the skill being learned. For example, presenting the basic create-and-print word processing scenario through a series of subsections entitled "Starting a new memo," "Working in the typing area," and "Requesting a print" suggests the major structural components for the create-and-print scenario. Examples of ineffective section headings are "You can typeset your own letters," "Switching to and from the DOS command line," and "Tips for users of WordPerfect" Although it is easy to imagine important content under these headings, they do not suggest anything at all about the organization of the basic domain tasks. They don't give the big picture and, instead, draw users into the lowest level of the procedure, the individual steps. In the MiTTS manual, the headings convey an overview of the main tasks in the domain (Rosson et al. 1993). The major subheads for chapter 1 are shown in the left column of Figure 4. This sequence of phrases is a fair summary of what the user does in this chapter: open a browsing tool, use the tool to survey the code for a Blackjack game application, use the code to create an instance of the Blackjack class, further explore the code by sending some simple messages to the Blackjack instance, and then continue to explore some other objects used by Blackjack and some further message sending relations. Indeed, this is also the basic structure of the prototypical scenario for code exploration in Smalltalk programming. These headings focus the learner's attention on working on the Blackjack project, but they leave it to the learner to generate the analysis of that specific project. To extract the general schema of Smalltalk programming activities, general headings can be more effective. For example, in our work on the Reuse View Matcher, a documentation tool, we found that even when people find very concrete examples useful, they sometimes are hampered by example-specific headings in the presentation of the examples (Rosson and Carroll 1994). In addition, general headings allowed us to couch some explanation at the most general level. Since users quite typically try to make subsequent use of instructional material as reference material, more general headings, such as those shown in the right column of Figure 4, may subsequently serve as better search keys. A similar heuristic can be applied in designing online instructional tools. In our View Matcher tool, several views of a running Smalltalk application are displayed simultaneously. These different views comprise a structural analysis of concerns users can pursue: a Graphical Presentation of the application (e.g., the Blackjack game) displays a particular task state, a Method Executive Stack details the computations that correspond to that application state, a Commentary Pane links the two by providing a description of the currently selected computation (message send) in the application semantics, and a Bittitalk Browser displays the code that underlies the currently selected computation in the Method Execution Stack (Figure 2 presents another example of multiple views from the MoleHill tutoring system). In short, headings that reflect the task structure may support users in different ways. They can offer scenarios that users otherwise (must) create themselves, and they can support the different points of view users (should) take in task execution. In addition, they help users locate information easily when the manual is consulted for reference. Principle 3: support error recognition AND RECOVERY Users of software make many mistakes, and correcting these mistakes may be very time consuming. Research shows that learners spend between 25% and 50% of their time correcting errors (Arnold and Roe 1987; Bailey 1983; Card et al. 1983, 1990; Carroll et al. 1987; Graesser and Murray 1990; Lazonder and Van der Meij 1994a; Van der Meij 1993). Reducing mistakes and streamlining discovery, diagnosis, and correction may substantially reduce the frustration and anxiety of learning about and using computers. In addition, it may make such learning and use more productive (Wendel and Frese 1987). 250 Technical Communication , Second Quarter 1995</page><page sequence="9">Topic 1: Exploring the Blackjack Game Topic 1: Exploring an application Starting up the Bittitalk Browser Starting up the class browser The Blackjack game Finding the application game Creating an instance of Blackjack Creating an application instance Sending messages to the Blackjack instance Sending messages to the application instance Exploring other objects and message used in Exploring other objects and message used by the Blackjack application class Figure 4. Headings should give an overview of the main tasks in a domain . Generic headings (right column) may be more useful than specific headings (left column) to support the development of a general schema and subsequent reference use . In our research, we distinguish the following categories of mistakes: semantic, syntactic, and slip (Allwood and Eliasson 1987; Lazonder 1993, 1994; Lazonder and Van der Meij 1992, 1994a; Lewis and Norman 1986). A semantic error occurs when a method that cannot possibly achieve a given goal is chosen. For example, users make a semantic error when they try to save a file by clicking one of the buttons controlling the presentation of files (e.g., the maximize or minimize button on the title bar). When a correct method is followed, but its execution is performed improperly, a syntactic error occurs. A typical example is that of a user who selects bold font and then selects the text target (instead of performing the two actions in the reverse order). Slips are small mistakes that occur at the keystroke level (e.g., mistyping the name of a file when conducting a search for it). In general, we have found it easier to support the detection, diagnosis, and correction of syntactic errors than of semantic errors or slips (Lazonder and Van der Meij 1994b, in press). Of all error types, syntactic mistakes are the most foreseeable. They can be predicted with reasonable accuracy and, therefore, precise and well-placed error information can be given for these errors. Semantic errors and slips are more difficult to predict. Consequently, it is harder to provide error information at the right place and with the right (i.e., specific) content. The described correction method is often a general method that works for different kinds of mistakes and in many different situations (e.g., choose "Undo" or press the Escape key [Van der Meij 1992]). For detecting errors that are difficult to predict, usability testing is indispensable. So, although our experience concurs with Schriver's (1992) observation that writers with extensive usability testing experience develop a third eye for the problematic places in a manual, iterative testing remains necessary. It is absolutely essential to test the manual with a sample of subjects from the intended audience (Carroll 1984; Karat 1990; Mack et al. 1990; Schriver 1989, 1992, 1993; Thimbleby 1991). In general, we have found that a sample of six to eight subjects suffices for locating most of the "hot spots" in a manual. With regard to the minimalist philosophy of presenting less information to users, the provision of error information takes a special position in that it is often desirable to present more than the bare minimum. Our research suggests there should be ample error information in the manual (Carroll 1984, 1990a; Lazonder and Van der Meij 1994a, 1994b; Thimbleby 1991). In general, we have found it desirable to include error information at a rate of about once for every three actions. The frequent inclusion of error information provides a safety net, supports more flexible and ambitious action-oriented learning, and helps deepen the users' understanding of how the program works. Without the error information, action-oriented instructions can be forced to a low- level focus on training by merely playing back scripts (Charney et al. 1990; Way 1991). Another argument for the frequent inclusion of error information in the manual is that programs often do not have adequate help systems for novices. Technical Communication , Second Quarter 1995 251</page><page sequence="10">For example, in our research with word processors (for MS DOS) we registered only about 10 successful instances of such consults. Given a sample of more than 350 users working about 1500 hours with this word processor, this does not speak favorably of its support! Other research reports the same miserable state of affairs. Allwood and Kalén (1993), for example, mention that, on 93% of the occasions when help was needed in a patient registration system, it was not even available. If the manual supports error detection, diagnosis, and correction according to the heuristics outlined below, user mistakes may help rather than hinder. They can substantially contribute to the users' confidence and skills in using a program (Carroll et al. 1987; Lazonder 1994; Lazonder and Van der Meij 1993; Seifert and Hutchins 1992; Van der Meij 1993). For example, in a recent study, we compared subjects who used a manual with error information designed according to our minimalist principles with subjects who used the same manual but with most of the error information excluded. Significant effects were found on many aspects of error detection, diagnosis, and correction. For example, the presence of error information helped subjects detect errors 33% faster during training and led to 28% better diagnosis and 73% more successful correction after training (Lazonder and Van der Meij, in press). Heuristic 3.1: Prevent Mistakes Whenever Possible The best way to remedy some mistakes is to help users avoid making them in the first place. Prevention can be found in different guises, for example by following well-known guidelines, such as providing a safe trajectory of activities, using short and simple sentences, signaling action information clearly, minimizing jargon, and so on. Mistakes can also sometimes be prevented by including hints in the manual. For example, in our MiTTS tutorial we have used hints to warn users against certain mistakes (e.g., "Upper and lower case matter in Smalltalk. Type the expression exactly as it appears in the instruction" [Rosson et al. 1993]). Because of their distinct signaling and the high interest value of hints in general, and because the pages are not crowded with hints, we feel that there is a fair chance that users will actually follow the advice. Some errors can be prevented by using the results from user tests to rewrite certain sections (Gould and Lewis 1985; Karat 1990). Tests may indicate that users often make mistakes in executing a particular task, signaling that a further decomposition of the task (e.g., making subgoals and choosing smaller chunks of action steps) may be helpful. For example, stimulated by the "olympic" demands for creating a user guide for the athletes and officials using the 1984 Olympic Message System, Gould and his co-workers tested 200 pilot versions before reaching a final product (Gould et al. 1987). In general, recordings and analyses of user errors can prompt a redesign of the manual or of the program (Gould et al. 1987; Mantei and Teorey 1988). Errors can also be blocked. Certain options can be made unavailable to the user, or users may not be given a chance to explore certain options. An important rationale behind such training wheels technology is that users can get themselves in serious trouble when exploring (Carroll and Carrithers 1984). For example, one system we studied had an extremely inflexible response to the misspecification of a disk name: it froze in the state prompting for that disk. Most users responded to this error by turning the system off and restarting it, which took several minutes (and caused a disk recovery error as a side effect). When we designed our training wheels error- blocking software, we made sure to include this error among those blocked. The best place to prevent errors is probably in the program itself. Both for writers and programmers, defensive programming should be the ultimate goal. For example, many programs currently warn users who wish to close a file without saving the changes that were made by asking "Would you like to save your changes?". Likewise, in MS DOS, giving the command "delete *.*" can have such catastrophic consequences that users are always asked to verify that action first "All your files will be deleted! Are you sure? (Y/N)." Because of the high risk, even the default is special. Normally a default value is automatically indicated; here it is not. Users must type the response; an inadvertent "ENTER" merely repeats the question. Clearly, such error prevention can never be as timely or as effective in a paper manual. Heuristic 3.2: Provide Error Information When Actions Are Error-Prone or When Correction Is Difficult Error information is often needed when actions are error prone. Typically, these situations arise 252 Technical Communication, Second Quarter 1995</page><page sequence="11">because of a mismatch with the users' knowledge, or because the required actions deviate from a standard routine. For example, in WordPerfect 5.1 users often got stuck when they wanted to exit out of the Print Preview mode. Activating the menu - the standard routine - failed because the program did not accommodate it. In addition, there was no information on the screen suggesting how to exit. As a result, many users were lost and many mistakes were made. Failures also often occur when the users' real- world experience conflicts with the way the program should be operated or when prior knowledge is insufficient (Carroll et al. 1988; Douglas and Moran 1984; Payne 1991). Typically, this is the case when users forget to create a text block before underlining existing text. Users overlook the marking of a block of text because they do not have to perform these actions in a noncomputer environment. They are simply not part of the way in which people normally deal with issues of text presentation. The presence of error information may also be called for when correction is difficult. Often, but not always, this is the case when error recovery truly depends on correcting the mistake or when the consequences of some actions are hard to understand. Recuperating from mistakes is possible in two ways. Users can follow a (re)constructive approach or a corrective approach (Lazonder 1994; Lazonder and Van der Meij in press). In a (re)constructive approach, users merely reposition themselves, which suffices for task continuity. In a corrective approach, the user must really correct (remove) the mistake. In the latter situation, in particular, the manual should provide error information. For example, when users give a wrong file name after activating the "File Retrieve" option in WordPerfect , they are trapped on the status bar until they correct their mistake. The manual should inform users how to make this correction. Error information is open needed when actions are error prone. In designing MiTTS, we identified several seemingly trivial syntax errors that produced outcomes uninterpretable to new Smalltalk programmers. For example, omitting the return symbol O produces a method that returns nothing - an outcome for which it is difficult to find specific causes. We paid very careful attention to the way this detail was introduced in the manual to avoid the occurrence of the error and to support its recognition and correction. Error information is nearly always called for when two or more of the above factors appear simultaneously, that is, when standard routines fail and there is no other information to guide the user. Likewise, users need help with mistakes when there is a mismatch with prior knowledge, when the cause or consequences of an incorrect action is difficult to understand, and when error recovery depends on a true correction of the mistake. Heuristic 3.3: Provide Error Information that Supports Detection, Diagnosis, and Correction After committing a mistake, users need to recognize and locate their error, understand and analyze it to an appropriate extent, and then take some corrective or evasive action (Allwood 1984; Lazonder 1993, 1994; Lazonder and Van der Meij 1994a; Van der Meij 1993). For error recovery, detection and correction are requisite; diagnosis is optional. These processes are detailed below along with illustrations of how they can affect the type of error information given in the manual. Detection of a mistake can be triggered internally or externally (Allwood 1984; Lazonder 1993). Internal triggering takes place when users feel they have done something wrong but lack a visible cue to support this. Typically, this kind of triggering is set off by questions like "Did I do this right?" and "Is this wrong?" External triggering takes place when some information on the screen sets off these questions. These questions can be prompted by a program message saying that a file will be removed without saving the changes. These questions can also arise when users are confronted with some unexpected and unintended outcome. For example, when users forget to mark a piece of text as a block and then try to set it into italics, nothing visibly happens. This, in turn, will set them wondering. In diagnosis, the nature of the error is established; users try to find out what kind of error they have made (Lazonder and Van der Meij 1994a, 1994b). When triggering is stimulated externally, detection and diagnosis often are one process. The presence and the nature of a mistake are then cued simultaneously. Typical examples are on-screen messages, such as "syntax error" and "ERROR - File CHATPER1.DOC not found," or warnings such as "All files will be deleted." Diagnosing after internal Technical Communication , Second Quarter 1995 253</page><page sequence="12">triggering is much more difficult because users have no visible cue suggesting what mistake(s) may have been made. In diagnosis, yet another process may take place, namely an analysis of the cause of the error (Lazonder and Van der Meij 1992). For some program messages, this cause can be located easily. A message like "ERROR- File CHATPER1.DOC not found" speaks for itself. In many cases, however, these messages do not reveal the cause (e.g., "Cannot change. . .setting"), and this step in diagnosis must be made by the user. Think-aloud protocols of users then typically reveal some inferential reasoning such as "Ah, of course, I pressed Fl instead of Shift + Fl" and "Oh, I forgot to type the dot" or "I don't want to do that." In correction users set themselves a new goal (Allwood 1984; Arnold and Roe 1987; Lazonder and Van der Meij 1994a, 1994b). This goal may be to recoup - to correct the mistake and get on with the work. It may also be that users try to get back to where they were right before the mistake, to merely put themselves into a position to start afresh (Lazonder and Van der Meij in press). The error information in our manuals is designed so that it supports all these processes when necessary. That is, users may be given information to detect, diagnose, and recover from a mistake (Lazonder 1994; Lazonder and Van der Meij 1994a, 1994b; Van der Meij 1992, 1993). The examples shown in Figure 5 illustrate that all processes are not always treated in the same detail. Among others, variations depend on, for example, whether the mistake must be corrected or whether only a repositioning is needed. Some variations also stem from a fine tuning of program and manual and from the suitability of specific or general correction methods. In addition, when a program provides prompts for recovery, it can be desirable to give incomplete correction information in the manual suggesting that, from a certain point onward, users should follow these prompts (see example 7 in Figure 5). Heuristic 3.4: Provide On-The-Spot Error Information Most manuals fail to support the users' error recognition and correction at the right spots. Usually, all or nearly all the error information is stored away in a separate section at the end of the book. We believe that error information should be placed where users need it most. It should be as near as possible to the wrongly executed actions or methods (Carroll 1984, 1990a; Carroll et al. 1987; Lazonder and Van der Meij 1992, 1994a, 1994b; Van der Meij 1993). Proximal positioning of the error information is crucial for a number of reasons. First, it can help users catch mistakes early, before they lead to possibly even greater mistakes that can be nightmares to restore. Second, when only one or two actions have been executed before the user notices the mistake, there is a fair chance the user can easily diagnose what went wrong. Diagnosing is much more difficult, if not downright impossible, when a multitude of key presses lie between the mistake and the moment of detection. Third, proximal positioning helps overcome the problems of giving the right contextual information and of being specific enough. When all error information is placed in a separate section, it can be extremely difficult to describe the problem state so that the information is both easily accessible and readily understood by the reader (Hunt and Vassiliadis 1988). In our research, we have discovered yet another reason why proximal positioning of error information is desirable. We have found that users exploit the error information to explore error correction out of curiosity - even when they can execute the particular task faultlessly (Van der Meij 1992, 1994). Such exploratory usage of error information is neither incidental nor unusual. Around 15% of all error information in our minimal manuals is used to practice making a mistake and recovering from it. For one manual, this comprised an average of 7 such error "simulations" during a practice period of around 4 hours (Van der Meij 1994). When the error information is placed in a separate section in the manual, this type of usage is probably zero. Principle 4: support reading to do, STUDY, AND LOCATE The various ways in which people process a manual have been qualified under colorful names such as the penguin syndrome, the nose-in-the-book phenomenon, and the kick-and-rush strategy (Bethke et al. 1991; Carroll 1984; Rettig 1991). All these names signal that users do not systematically process their manual from beginning to end. Instead, their behavior is more flexible. Sometimes they read to study, and sometimes they read to locate some information. Most of the time, however, they read to 254 Technical Communication , Second Quarter 1995</page><page sequence="13">1. "If the statement A:'coins.wp does not appear on Error type: semantic the status-bar, you have forgotten to clear the screen Problem: detection and correction first. Press the F7 key and type a N twice to clear the Solution: specific detection information, specific correction information screen." 2. "If the statement Document to be retrieved: does Error type: semantic not appear on the screen, you have chosen a wrong Problem: detection and correction, diagnosis may be impossible command. Press the Fl key to undo your choice." Solution: specific detection information, general correction information 3. "If the text has been inserted at the wrong place, Error type: syntactic you have positioned the cursor wrongly after pressing Problem: diagnosis the Enter key. Remove the text again." Solution: specific detection and diagnostic information, prompts for correction 4. "If the statement Drive not ready reading drive A. Error type: syntactic appears, you have not inserted the diskette deep Problem: detection, diagnosis and correction enough into the drive. Insert it so that the button pops Solution: specific information for detection, diagnosis and correction (note up. Then type a 1" that no full stop is given after the last sentence to prevent an accidental typing error) 5. 'Typing mistakes can be corrected by pressing the Error type: slip Backspace key. Thereafter type the correct text." Problem: none Solution: general correction information 6. "If your screen remains empty, you may have made Error type: slip a typing error. Again type the name of the file and Problem: diagnosis and correction press the Enter key." Solution: specific correction information 7. "If the statement Document to be saved: Error type: syntactic or slip A:'letterl.wp does not appear on the screen, you Problem: detection have made a typing error. Press the Enter key once Solution: specific detection information, prompt to interact with program sind then answer the question the program asks you." for correction Figure 5. The left column presents seven examples of error information given in the WordPerfect Minimal Manual . The right column characterizes each example by the type of mistake that is made and the main problem of users and gives the corresponding rationale for the content of the error information . do; most of the reading is task and action oriented (Bethke et al. 1991; Carroll 1984; Debs 1988; Redish 1988; Sticht 1985). Observations from users suggest they can be classified roughly into three main groups. These groups are described below, and some of the ways in which the manual can be tailored to their reading strategies are illustrated. A small group of users is likely to read a conventional manual cover to cover. Penrose and Seiford (1988) suggest this may constitute less than 15% of all readers. In contrast, for our minimal manuals, we have found figures of 90% and higher (Van der Meij 1992). These users follow the sequencing of the chapters and process the whole manual, but they do not process the manual in a completely linear fashion. Instead, their behavior is recursive; they reread chapters and frequently look back to earlier sections. By presenting only the Technical Communication , Second Quarter 1995 255</page><page sequence="14">necessary preliminaries and little text overall, writers can increase the chances that a large group of users will process the manual in this fashion. A second group of users typically starts at the beginning, but abandons the manual after a while, and then processes it in a more random fashion, doing a lot of browsing. When certain tasks in the manual are attempted, these users must go back and forth in the manual to find out how prerequisite actions can be performed. To support such explorations, browsing, and look-backs, the manual should be designed in a modular fashion, making sections like chapters and paragraphs as independent of previous sections as possible. In addition, prerequisite actions must clearly be indicated and headings and signaling techniques must support "reading to locate" (Dreher 1993; Dreher and Guthrie 1993). A third group of users uses the manual as a last resort. Usually, these users turn to the manual only when they are stuck, browsing the body text to find the right information. They may, however, also use the front or back matter of the manual to conduct a more directed search. These users profit from the same design techniques as those in the second group. In addition, special attention is needed for the front and back matter. For instance, the careful construction of a proper table of contents, including a judicious wording of headings, is called for. The manual should somehow support all these users and all their reading strategies, and to achieve this, the manual must make a favorable first impression. It is vitally important to avoid giving the manual a massive appearance (Brockmann 1990; Thing 1984). Just by looking at its size, users should get the idea that working through the manual won't take them long and that learning to use the application won't be too difficult. Minimization of content is therefore necessary; the manual must cut down considerably on substance. Combined with adequate presentation techniques, the old Bauhaus notion of "doing more with less" can come true. The heuristics presented below detail how to achieve this. Heuristic 4.1: Be Brief; Don't Spell Out Everything Remember: the users are generally not seeking explanations for their own sake (Carroll 1990b; Wright 1989). Manuals traditionally present explanatory material as a prerequisite to procedural material. For instance, how information is stored magnetically on disks is discussed before the user is introduced to procedures for creating and manipulating such information. If explanations are needed, they should be short to give users the impression of being easy to work through (Markel et al. 1992; Meyer 1986), and we suggest they may often be more effective when given after, rather than before, task completion. Another way to be brief is to create chapters of 2 to 4 pages (Arnold 1988; Weiss 1991). This gives users the impression that working them through does not require an inordinate amount of time or the endurance of a long-distance runner. The manual must live up to these expectations; chapters should not only look short, they also should take a short time to work through. We have found that designing for a mean time of around 20 minutes per chapter works well. This generally enables 95% of all users to complete a chapter within 30 minutes, which seems about the right time for users to concentrate on the task and to stay motivated. Rather than explaining or showing it all to users, writers can use pointers and prompts to have users infer things. A key principle for not spelling out everything is to omit information that can be inferred easily (Carroll 1990b; Carroll et al. 1987; Lazonder and Van der Meij 1993; Van der Meij 1992). For example, manuals often discuss how certain keys work. One manual for a word processor even introduces the metaphor of the Pied Piper of Hamelin to explain how pressing the backspace key makes all signs preceding the cursor disappear. The delete key is linked to "black holes." In a minimalist approach, no such explanations are given; users merely exercise the use of the backspace and delete keys. These actions are supposed to speak for themselves; users should be able to see how these keys work and infer how they differ. It is also often desirable not to give full screen information (Carroll 1984, 1990b; Van der Meij 1993, 1994). Some manuals give full screen information to support switching back and forth between manual, keyboard, and screen. The end result, however, may be that users pay too little attention to the screen. In minimal manuals, we try to stimulate out-of-the-book and back into-the-book activities by giving incomplete screen information (Horton, 1993). Full screen information typically consists of two types of information presented "in context": a particular content, (e.g., icon, warning, question, or menu- option) and some locative information (e.g., top, bottom, right, or left). Incomplete screen information can be created by omitting one of the two and by 256 Technical Communication, Second Quarter 1995</page><page sequence="15">making the information less explicit. For example, stimulating users to attend to a message of the program can be achieved by statements such as "A warning appears at the bottom of the screen." Users can be prompted to locate information with a statement like "Check if the following sentence appears on the screen: Name Document:. . ." Another solution is to show only the important area. Some prompts may even be vague on content and location to make users depend less on the manual for support: "Look at the screen to see what further actions you should perform." In general, reducing the "text" of a manual is often a matter of exploiting actions and the context in which they appear. By being brief, the manual communicates to users that their task does not require a formidable effort. By not explaining everything, the manual stimulates users to activate relevant prior knowledge and depend more on their own thinking. In general, reducing the "text" of a manual is often a matter of exploiting actions and the context in which they appear. Heuristic 4.2: Provide Closure for Chapters For random access readers, it would be ideal if chapters could be worked through in random order. When chapters are made completely independent of one another, users can jump around in any direction. Unfortunately, this total independence is impossible to realize. Some dependency will always be the case. What writers can do, however, is to make chapters as independent as possible by providing closure (Arnold 1988; Van der Meij 1992; Weiss 1991). Closure means that each chapter depends on as little "outside" information as possible. Users should need to consult other chapters (and books) only by exception. It also means that tasks are rounded off in each chapter. One might say that closure means starting and ending with a clean desk. To achieve closure, writers should attend to: deciding on a home base; avoiding dependency of products; and avoiding dependency of process skills across chapters as much as possible. The writer must choose a home base from which to start and end each chapter. This home base can be the computer turned off, but most often it is the "startscreen," or window, that users see after opening an application. The main menu-bar is visible and perhaps some of the working area is displayed. The startscreen is a good home base because it is an easy point from which to exit or further enter an application. In addition, it is the screen most users should become intimately familiar with. When all chapters in a manual start from home base, there is a common entry point for all users: those who come from the previous chapter, and those who just step in. Closure also depends on avoiding dependency of products across chapters. Manuals sometimes are designed around a single case, or file, the contents of which become more and more complex as users work through the chapters. Because all sorts of things can go wrong, and because users may not want to start at the beginning, such dependencies should be avoided. It is desirable to have users create independent products in each chapter. There are at least two ways to achieve this: offer different sample files prepared specifically for the task(s) at hand in each chapter for users to practice on; or provide backup files users can activate when starting a new chapter, which maintains the buildup of a case, or file, without the dependency. How one handles prior knowledge and skills must also be considered. What users learn in one chapter may be needed in another. In our first design of a minimal manual, we intended to be as minimal as possible, asking users merely to achieve a certain goal if the procedure for reaching that goal had been presented earlier in the manual. For example, in chapter 3 the action information would merely say "Open file x." Users were expected to know by then how to do this or to look back to the precise steps described in the previous chapter. Tests revealed that this led to too many mistakes and lookbacks; therefore, we decided to fade out the action information more gradually. We built in more reminders and made each reminder less complete. For example, we would say what users had to do, not how to do so: "Open file x by selecting the file retrieve option." These later manuals were more successful in reducing the number of mistakes and lookbacks. When users start and end at home base in each chapter, some tasks are repeated frequently in the manual. When a startscreen is the home base, these repetitions concern fundamental managerial tasks such as opening, saving, and closing files. We have found that these repetitions make users fast at and very comfortable with file management (Lazonder and Van der Meij 1993; Van der Meij 1992). We see these repetitions as beneficial rather than obstructive, because these management skills are probably among the most important ones novices should acquire. Technical Communication , Second Quarter 1995 257</page><page sequence="16">Conclusion We have outlined the theoretical and empirical . rationales for four minimalist design principles and their corresponding heuristics. The article expresses our understanding of the foundation, application, and development path for a minimalist approach to instruction. It should make possible a further development of this knowledge and of the ways in which it can be applied. We have emphasized here the codification of the minimalist approach as a set of practical techniques and specific heuristics for designing action. Our objective is to provide a view of minimalism that complements other published material and integrates the many narrower research studies, while decomposing the minimalist approach (e.g., our four principles) into action-oriented heuristics. Thus, this article summarizes what we now know about minimalist design of instruction and how to use what we know. Finally, we hope that this article can help to initiate a broad-based discussion, development, and codification for minimalist designs. Much has been accomplished in the past decade, but, as always, much more remains to be done. ÍI Acknowledgments This article was prepared when the second author visited the Ergonomics Department of Twente University. We thank Ard Lazonder for comments on earlier versions of this paper. We also acknowledge the incisive review of Karen Ann Schriver and Deborah Andrews for help with editing. Requests for reprints should be sent to Hans van der Meij. REFERENCES Alpert, S. R., M. K. Singley, and J. M. Carroll. In press. "Multiple multimodal mentors: Delivering computer- based instruction via specialized anthropomorphic advisors." Behaviour and Information Technology. Allwood, C. M. 1984. "Error detection processes in statistical problem solving." Cognitive Science 8: 413-437. All wood, C. M., and M. Eliasson. 1987. "Analogy and other sources of difficulty in novices' very first text-editing." International Journal of Man-Machine Studies 27: 1-22. Allwood, C. M., and T. Kalén. 1993. "User-competence and other usability aspects when introducing a patient administrative system: a case study." Interacting with Computers 5: 167-191. Arnold, B., and R. Roe. 1987. "User errors in human-computer interaction." In Psychological issues of human computer interaction in the work place. M. Frese, E. Ulich, and W. Dzida, eds. Amsterdam, Neth: Elsevier, pp. 203-222. Arnold, W. A. 1988. "Learning modules in minimalist documents." In Proceedings of the 35th International Technical Communication Conference. Washington, DC: Society for Technical Communication, pp. WEI 6 -WEI 9. Bailey, R. W. 1983. Human error in computer systems. Englewood Cliffs, NJ: Prentice Hall. Bethke, F. J., W. M. Dean, P. H. Kaiser, E. Ort, and F. H. Pessin. 1991. "Improving the usability of programming publications." The Journal of Computer Documentation 15, no. 2: 3-22. Black, J. B., J. M. Carroll, and S. M. McGuigan. 1987. "What kind of minimal instruction manual is the most effective?" In Proceedings of CHI +GI ' 87 Conference. J. M. Carroll, and P. P. Tanner, eds. New York, NY: Association for Computing Machinery, pp. 159-162. Brockmann, R. J. 1990. Writing better user documentation: From paper to hypertext. Version 2.0. New York, NY: Wiley. Byrnes, J. P., and J. T. Guthrie. 1992. "Prior conceptual knowledge and textbook search." Contemporary Educational Psychology 17: 8-29. Card, S. K., Th. P. Moran, and A. Newell. 1983. The psychology of human-computer interaction. Hillsdale, NJ: Lawrence Erlbaum Associates. . 1990. "The keystroke-level model for user performance time with interactive systems." In Human- computer interaction: selected readings. J. Preece, and L. Keller, eds. Hemel Hempstead: Prentice Hall. pp. 327- 356. Carroll, J. M. 1984. "Minimalist training." Datamation 30: 125-136. . 1990a. The Nürnberg Funnel: Designing minimalist instruction for practical computer skill. Cambridge, MA: MIT Press. . 1990b. "An overview of minimalist instruction." In Proceedings of the 23rd Annual Hawaii International Conference on Systems Sciences. Washington, DC: Institute of Electrical and Electronic Engineers Computer Society Press Reprint. . 1993. "Techniques for minimalist documentation and user interface design." Paper presented at the Conference Quality of Technical Documentation, 6-7 May, Enschede, The Netherlands. Carroll, J. M., and C. Carrithers. 1984. "Training wheels in a user interface." Communications of the Association for Computing Machinery. 27: 800-806. Carroll, J. M., R. L. Mack, and W. A. Kellog. 1988. "Interface metaphors and user interface design." In Handbook of human-computer interaction, M. Helander, ed. Amsterdam, Neth: Elsevier, pp. 67-85. Carroll, J. M., and M. B. Rosson. 1987. "The paradox of the active user." In Interfacing thought: Cognitive aspects of human-computer interaction, J. M. Carroll, ed. Cambridge, MA: MIT Press, pp. 80-111. Carroll, J. M., P. L. Smith-Kerker, J. R. Ford, and S. A. Mazur-Rimetz. 1987. "The minimal manual." Human- Computer Interaction 3: 123-153. Charney, D. H., and L. M. Reder. 1986. "Designing interactive tutorials for computer users." Human- 258 Technical Communication , Second Quarter 1995</page><page sequence="17">Computer Interaction 2: 297-317. Charney, D. H., L. M. Reder, and G. W. Kusbit. 1990. "Goal setting and procedure selection in acquiring computer skills: A comparison of tutorials, problem solving and learner exploration." Cognition and Instruction 7: 323-342. Davis Baker, L. 1988. "The relationship of product design to document design." In Effective documentation: What we have learned from research. S. Doheny-Farina, ed. Cambridge, MA: MIT Press, pp. 317-327. Debs, M. B. 1988. "A history of advice: What experts have to tell us." In Effective documentation: What we have learned from research. S. Doheny-Farina, ed. Cambridge, MA: MIT Press, pp. 11-24. Digitalk, Inc. 1989. Smalltalk/V 286: Object-oriented programming system. Douglas, S. A., and Th. P. Moran. 1984. "Learning test editor semantics by analogy." In Proceedings of the Computer and Human Interaction 1983 Conference on Human Factors in Computer Systems. New York, NY: Association for Computing Machinery, pp. 207-211. Dreher, M. J. 1993. "Reading to locate information: Societal and educational perspectives." Contemporary Educational Psychology 18: 129-138. Dreher, M. J., and J. T. Guthrie. 1993. "Cognitive processes in textbook chapter search tasks." Reading Research Quarterly 25: 323-339. Farkas, D. K. 1993. "The role of balloon help." The Journal of Computer Documentation 17, no. 2: 3-19. Frese, M., K. Albrecht, A. Altmann, J. Lang, P. von Papstein, R. Peyerl, J. Prümper, H. Schulte-Göcking, I. Wankmüller, and R. Wendel. 1988. "The effect of an active development of the mental model in the training process: Experimental results in a word processing system." Behavior and Information Technology 7: 295-304. Gong, R., and J. Elkerton. 1990. "Designing minimal documentation using a GOMS model: A usability evaluation of an engineering approach." In Proceedings of the CHI'90 Conference. J. Carrasco Chew, and J. Whiteside, eds. New York, NY: Association for Computing Machinery, pp. 99-106. Gould, J. D., S. J. Boies, S. Levy, J. T. Richards, and J. Schoonard. 1987. "The 1984 Olympic Message System: A test of behavioral principles of system design." Communications of the Association for Computing Machinery 30: 758-769. Gould, J. D., and C. Lewis. 1985. "Designing for usability: Key principles and what designers think." Communications of the Association for Computing Machinery 28: 300-311. Graesser, A. C., and K. Murray. 1990. "A question- answering methodology for exploring a user's acquisition and knowledge of a computer environment." In Cognition, computing and cooperation. S. P. Robertson, W. Zachary, and J. B. Black, eds. Norwood, NJ: Ablex Publishing Corp. pp. 237-267. Hager, P. J. 1992. "Teaching students the verticality of technical documentation." Technical Communication 39: 182-188. Hallgren, C. 1992. "The Nürnberg Funnel: A minimal collection." The Journal of Computer Documentation 16, no. 1: 11-17. Hartley, J. 1985. Designing instructional text. London, Eng: Kogan Page. Hartley, J. 1990. "Textbook design: current status and future directions." International Journal of Educational Research 14: 533-541. Hill, W. C. 1989. "How some advice fails." Proceedings of the Computer and Human Interaction (CHI) 1989 Conference on Human Factors in Computer Systems. New York, NY: Association for Computing Machinery, pp. 85-90. Horn, R. E. 1992. "Commentary on the Nürnberg Funnel." The Journal of Computer Documentation 16, no. 1: 3-11. Horton, W. 1993. "Dump the dumb screen dumps." Technical Communication. 40, no. 1: 146-148. Hunt, P., and K. Vassiliadis. 1988. "No easy answers: Investigating computer error messages." In Effective documentation: What we have learned from research . S. Doheny-Farina, ed. Cambridge, MA: MIT Press, pp. 127- 142. Karat, C. M. 1990. "Cost-benefit analysis of iterative usability testing." In Human-Computer Interaction - Interact 1990. D. Diaper et al., eds. Amsterdam, Neth: Elsevier, pp. 351-356. Kay, D. S., and J. B. Black. 1990. "Knowledge transformations during the acquisition of computer expertise." In Cognition , computing and cooperation. S. P. Robertson, W. Zachary, and J. B. Black, eds. Norwood, NJ: Ablex Publishing Corp. pp. 268-303. Kluwe, R. H., C. Misiak, and H. Haider. 1990. "Learning by doing in the control of a complex system." In Learning and Instruction , Vol. 2.1. H. Mandi, E. de Corte, N. Bennett, and H. F. Friedrich, eds. New York, NY: Pergamon Press, pp. 197-218. Landauer, T. K. 1988. "Research methods m human- computer interaction." In Handbook of Human-Computer Interaction. M. Helander, ed. Amsterdam, Neth: Elsevier, pp. 905-928. Lazonder, A. W. 1993. "Tutorial documentation and the effective control of errors." Paper presented at the Conference Quality of Technical Documentation, 6-7 May, Enschede, The Netherlands. . 1994. "Minimalist computer documentation: a study on constructive and corrective skills development." Doctoral Dissertation, Twente University, The Netherlands. Lazonder, A. W., and H. van der Meij. 1992. "The effective error control in computer documentation." Paper presented at the second EARLI-SIG work conference on comprehension of verbal and pictorial information, November, Nijmegen, The Netherlands. . 1993. "The minimal manual: Is less really more?" International Journal of Man-Machine Studies 39: 729-752. . 1994a. "The effect of error-information in tutorial documentation." Interacting with Computers 6, no. 1: 23- 40. . 1994b. "Towards a theory of effective error control in computer documentation." In Process-oriented instruction , verbal and pictorial aids and comprehension Technical Communication , Second Quarter 1995 259</page><page sequence="18">strategies , F. P. C. M. de Jong, and B. H. A. M. Van Hout- Wolters, eds. Amsterdam, Neth: VU University Press. . In press. "Error-information in tutorial documentation: supporting users' errors to facilitate initial skill learning." International Journal of Human Computer Studies. Lewis, C., and D. A. Norman. 1986. "Designing for error." In User centered system design: New perspectives on human- computer interaction. D. A. Norman, and S. W. Draper, eds. Hillsdale, NJ: Lawrence Erlbaum Associates, pp. 411-432. Mack, R. L., C. H. Lewis, and J. M. Carroll. 1990. "Learning to use word processors: Problems and prospects." In Human-computer interaction: Selected readings. }. Preece, and L. Keller, eds. Hemel Hempstead: Prentice Hall. pp. 185-204. Mantei, M. M., and T. J. Teorey. 1988. "Cost-benefit analysis for incorporating human factors in the software lifecycle." Communications of the Association for Computing Machinery 31: 428-439. Markel, M., M. Vaccaro, and T. Hewett. 1992. "Effects of paragraph length on attitudes toward technical writing." Technical Communication 39, no. 3: 454-456. Matchett, M., and M. L. Ray. 1989. "Revising 1RS publications: a case study." Technical Communication 36, no. 4: 332-340. Nickerson, R. S. 1991. "A minimalist approach to the "paradox of sense making"." Educational Research 20, no. 9: 24-26. Oatley, K., Meldrum, M. C., and Draper, S. W. 1991. "Evaluating self-instruction by minimal manual and by video for a feature of a word-processing system." Glasgow, Scot: University of Glasgow. Payne, S. J. 1991. "A descriptive study of mental models." Behaviour and Information Technology 10, no. 1: 3-21. Penrose, J. M., and L. M. Seif ord. 1988. "Microcomputer users' preferences for software documentation: an analysis." Journal of Technical Writing and Communication 18, no. 4: 355-366. Ramey, J. 1988. "How people use computer documentation: Implications for book design." In Effective documentation: What we have learned from research. S. Doheny-Farina, ed. Cambridge, MA: MIT Press, pp. 143-158. Ramsay, J. E., and K. Oatley. 1992. "Designing minimal computer manuals from scratch." Instructional Science 21: 85-98. Redish, J. C. 1988. "Reading to learn to do." The Technical Writing Teacher. 15: 223-233. Rettig, M. 1991. "Nobody reads documentation. Communications of the Association for Computing Machinery 34, no. 7: 19-24. Robertson, S. P., J. M. Carroll, R. Mack, M. B. Rosson, S. R. Alpert, and J. Koenemann-Belliveau. 1994. "ODE: The object design exploratorium." In Proceedings of OOP SLA '94: Association for Computing Machinery Conference on Object-Oriented Programming Systems , Language and Applications. Portland, OR. Rosson, M. B., and J. M. Carroll. 1994. "The role of examples in Smalltalk reuse." Yorktown Heights, NY: IBM Research Report, J. T. Watson Research Center. Rosson, M. B., J. M. Carroll, and R. K. E. Bellamy. 1990. "Smalltalk scaffolding: A case study of minimalist instruction." In Proceedings of the CHI '90 Conference on Human Factors in Computer Systems. New York, NY: Association for Computing Machinery, pp. 423-429. Rosson, M. B., J. M. Carroll, R. K. E. Bellamy, S. R. Alpert, and J. A. Singer. 1993. "MiTTS: Minimalist tutorial and tools for Smalltalk/ V." Yorktown Heights, NY: Computer Science Department. IBM T. }. Watson Research Center. Schriver, K. A. 1989. "Evaluating text quality: The continuum from text-focused to reader-focused methods." IEEE Transactions on Professional Communication , 32, no. 4: 238-255. . 1992. "Teaching writers to anticipate readers' needs: What can document designers learn from usability testing?" In Studies of functional text quality. H. Pander Maat, and M. Steehouder, eds. Amsterdam, Neth: Rodopi Press, pp. 141-157. . 1993. "Quality in document design: Issues and controversies." Technical Communication 40, no. 2: 239- 257. Seifert, C. M., and E. L. Hutchins. 1992. "Errors as opportunity: learning in a cooperative task." Human Computer Interaction 7: 409-435. Singley, M. K., J. M. Carroll, and S. R. Alpert. 1991. "Psychological design rationale for an intelligent tutoring system for Smalltalk.'' In Empirical studies of programmers IV. J. Koenemann-Belliveau, T. Moher, and S. P. Robertson, eds. Norwood, NJ: Ablex Publishing Corp. pp. 196-209. . 1993. "Incidental reification of goals in an intelligent tutor for Smalltalk." In Cognitive models and intelligent environments for learning programming. B. duBoulay, and E. Lemut, eds. New York, NY: Springer Verlag. Spyridakis, J. H., and M. J. Wenger. 1992. "Writing for human performance: Relating reading research to document design." Technical Communication 39: 202-215. Sticht, T. 1985. "Understanding readers and their uses of texts." In Designing usable texts. T. M. Duffy, and R. H. Waller, eds. Orlando, FL: Academic Press, pp. 315-340. Thimbleby, H. 1991. "Can humans think? The Ergonomics Society lecture 1991." Ergonomics 34: 1269-1287. Thing, L. 1984. "What the well-dressed manual is wearing todav." Technical Communication , 31, no. 4: 8-12. Tripp, S. D. 1990. "Book review of The Nürnberg Funnel." Educational Technology Research and Development 38, no. 3: 87-90. VanderLinden, G., T. G. Cocklin, and M. McKita. 1988. "Testing and developing minimalist tutorials: A case history." In Proceedings of the 35th International Technical Communications Conference. Washington, DC: Society for Technical Communication, pp. RETI 96 -RETI 99. Van der Meij, H. 1992. "A critical assessment of the minimalist approach to documentation." In Conference Proceedings of the 10th Annual International Conference on Systems Documentation (SIGDOC92), October, Ottawa, pp. 7-17. New York, NY: Association for Computing 260 Technical Communication, Second Quarter 1995</page><page sequence="19">Machinery. . 1993. "Learning by doing it on your own." Performance and Instruction 32, no. 10: 18-22. . 1994. "Catching the user in the act." Paper presented at the Conference Quality of Technical Documentation, 6-7 May, Enschede, The Netherlands. Van der Meij, H., and A. W. Lazonder. 1992. "A constructivistic approach to computer documentation." In Quality of technical documentation. M. Steehouder, C. Jansen, P. van der Poort, and R. Verheijen, eds. Amsterdam, Neth: Rodopi Press, pp. 201-210. . 1993. "Assessment of the minimalist approach to computer user documentation." Interacting with Computers 5, no. 4: 355-370. Van der Meij, H., and P. Van Stapele. 1993. "Self-managed media education." New Era in Education 74, no. 1: 26-36. Way, E. C. 1991. Knowledge representation and metaphor. Dordrecht: Kluwer. Weis, E. H. 1991. How to write usable user documentation. 2nd ed. Phoenix, AZ: Oryx Press. Wendel, R., and Frese, M. 1987. "Developing exploratory strategies in training: The general approach and a specific example for manual use." In Proceedings of the Second IFIP Conference on Human-Computer Interaction. H. J. Bullinger, B. Shackeland, and K. Kornwachs, eds. Amsterdam, Neth: Elsevier, pp. 943-948. Williams, T. R., and D. K. Farkas. 1992. "Minimalism reconsidered: Should we design documentation for exploratory learning?" SIGCHI Bulletin 24, no. 2: 41-50. Wright, P. 1987. "Writing technical information." In Review of research in education. E. Z. Rothkopf, ed. Washington, DC: American Educational Research Association, pp. 327-385. . 1989. "The need for theories of not reading: Some psychological aspects of the human-computer interface." In Working models of human perception. B. A. G. Elsendoorn, and H. Bouma, eds. London, Eng: Academic Press, pp. 319-320. Technical Communication , Second Quarter 1995 261 • STC Bulletin Board System • An electronic database of dissertations and theses in technical, scientific, and business communication operates on the Society for Technical Communication Bulletin Board System (BBS). The database contains more than 200 bibliographic entries with abstracts of research culled from Dissertation Abstracts International, Master's Abstracts International, and the ERIC database, along with others submitted by individual researchers. Kenneth T. Rainey, manager of the database, invites directors of technical, scientific, or business communication programs to submit entries for inclusion in the database. Contact him at Southern Tech, Marietta, GA 30060, or call (404) 528-7209 for information (Email: krainey@st6000.sct.edu). For information on accessing the database, call the STC office at (703) 522-41 1 4.</page></plain_text>